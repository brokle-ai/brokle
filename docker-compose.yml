services:
  # Database Services
  postgres:
    image: postgres:17-alpine
    container_name: brokle-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-brokle_prod}
      POSTGRES_USER: ${POSTGRES_USER:-brokle}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-brokle_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U brokle -d brokle_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - brokle-network

  clickhouse:
    image: clickhouse/clickhouse-server:24.12-alpine
    container_name: brokle-clickhouse
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:-default}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-brokle}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-brokle_password}
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./configs/clickhouse/config.xml:/etc/clickhouse-server/config.xml
      - ./configs/clickhouse/users.xml:/etc/clickhouse-server/users.xml
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - brokle-network

  redis:
    image: redis:7.4-alpine
    container_name: brokle-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./configs/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - brokle-network

  # Message Queue
  kafka:
    image: confluentinc/cp-kafka:7.7.1
    container_name: brokle-kafka
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - brokle-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.1
    container_name: brokle-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - brokle-network

  # Main API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: brokle-api
    ports:
      - "8080:8080"
    environment:
      - ENV=${ENV:-production}
      - DATABASE_URL=${DATABASE_URL:-postgres://brokle:brokle_password@postgres:5432/brokle_prod?sslmode=disable}
      - CLICKHOUSE_URL=${CLICKHOUSE_URL:-http://brokle:brokle_password@clickhouse:8123/default}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - KAFKA_BROKERS=${KAFKA_BROKERS:-kafka:9092}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    volumes:
      - ./configs:/app/configs
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - brokle-network

  # Frontend Dashboard
  dashboard:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: brokle-dashboard
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8080}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://localhost:8080}
    # Production: no volume mounts (static build)
    depends_on:
      - api
    networks:
      - brokle-network

  # Monitoring Services
  prometheus:
    image: prom/prometheus:v2.55.1
    container_name: brokle-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./configs/prometheus/alert.rules:/etc/prometheus/alert.rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - brokle-network

  grafana:
    image: grafana/grafana:11.3.0
    container_name: brokle-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - brokle-network

  alertmanager:
    image: prom/alertmanager:v0.27.0
    container_name: brokle-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./configs/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - brokle-network

  # Reverse Proxy & Load Balancer
  nginx:
    image: nginx:1.27-alpine
    container_name: brokle-nginx
    ports:
      - "8000:80"
      - "8443:443"
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./configs/nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - dashboard
    networks:
      - brokle-network

  # MinIO for local S3-compatible blob storage
  minio:
    image: minio/minio:latest
    container_name: brokle-minio
    ports:
      - "9100:9000"   # S3 API
      - "9101:9001"   # Console
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - brokle-network

volumes:
  postgres_data:
  clickhouse_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  nginx_logs:
  minio_data:

networks:
  brokle-network:
    driver: bridge