services:
  # Database Services
  postgres:
    image: postgres:17-alpine
    container_name: brokle-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-brokle_dev}
      POSTGRES_USER: ${POSTGRES_USER:-brokle}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-brokle_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U brokle -d brokle_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - brokle-network

  clickhouse:
    image: clickhouse/clickhouse-server:24.12-alpine
    container_name: brokle-clickhouse
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:-default}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-brokle}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-brokle_password}
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./configs/clickhouse/config.xml:/etc/clickhouse-server/config.xml
      - ./configs/clickhouse/users.xml:/etc/clickhouse-server/users.xml
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - brokle-network

  redis:
    image: redis:7.4-alpine
    container_name: brokle-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./configs/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - brokle-network

  # Backend API
  backend:
    build:
      context: .
    container_name: brokle-backend
    ports:
      - "8080:8080"
    environment:
      - ENV=${ENV:-development}
      - DB_AUTO_MIGRATE=false  # Server owns migrations
      - DATABASE_URL=postgres://brokle:brokle_password@postgres:5432/brokle_dev?sslmode=disable
      - CLICKHOUSE_URL=clickhouse://brokle:brokle_password@clickhouse:9000/default
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=${JWT_SECRET:-dev-jwt-secret-change-in-production}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    volumes:
      - ./configs:/app/configs
      - ./logs:/app/logs
    networks:
      - brokle-network

  # Background Workers
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: brokle-worker
    environment:
      - ENV=${ENV:-development}
      - DB_AUTO_MIGRATE=false  # Workers don't run migrations
      - DATABASE_URL=postgres://brokle:brokle_password@postgres:5432/brokle_dev?sslmode=disable
      - CLICKHOUSE_URL=clickhouse://brokle:brokle_password@clickhouse:9000/default
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=${LOG_LEVEL:-debug}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      backend:
        condition: service_healthy  # Wait for backend migrations
    volumes:
      - ./configs:/app/configs
      - ./logs:/app/logs
    networks:
      - brokle-network

  # Frontend Dashboard
  frontend:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: brokle-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8080}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://localhost:8080}
    depends_on:
      - backend
    networks:
      - brokle-network

  # MinIO for local S3-compatible blob storage
  minio:
    image: minio/minio:latest
    container_name: brokle-minio
    ports:
      - "9100:9000"   # S3 API
      - "9101:9001"   # Console
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - brokle-network

volumes:
  postgres_data:
  clickhouse_data:
  redis_data:
  minio_data:

networks:
  brokle-network:
    driver: bridge