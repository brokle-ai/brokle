// Package swagger Code generated by swaggo/swag. DO NOT EDIT
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://brokle.ai/terms",
        "contact": {
            "name": "Brokle Platform Team",
            "url": "https://brokle.ai/support",
            "email": "support@brokle.ai"
        },
        "license": {
            "name": "MIT License",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/admin/tokens/blacklisted": {
            "get": {
                "description": "Get a paginated list of blacklisted tokens with filtering options",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin",
                    "Token Management"
                ],
                "summary": "List blacklisted tokens",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 50,
                        "description": "Number of tokens to return (default: 50, max: 200)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 0,
                        "description": "Number of tokens to skip (default: 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"01K4FHGHT3XX9WFM293QPZ5G9V\"",
                        "description": "Filter by user ID",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"security_incident\"",
                        "description": "Filter by revocation reason",
                        "name": "reason",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Blacklisted tokens list",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/tokens/revoke": {
            "post": {
                "description": "Immediately revoke a specific access token by JTI",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin",
                    "Token Management"
                ],
                "summary": "Revoke specific token",
                "parameters": [
                    {
                        "description": "Token revocation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin.RevokeTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token revoked successfully",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/tokens/stats": {
            "get": {
                "description": "Get comprehensive statistics about token usage and revocation",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin",
                    "Token Management"
                ],
                "summary": "Get token statistics",
                "responses": {
                    "200": {
                        "description": "Token statistics",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/users/{userID}/tokens/revoke": {
            "post": {
                "description": "Immediately revoke all active access tokens for a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin",
                    "Token Management"
                ],
                "summary": "Revoke all user tokens",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"01K4FHGHT3XX9WFM293QPZ5G9V\"",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User token revocation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin.RevokeUserTokensRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User tokens revoked successfully",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/analytics/costs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed cost analytics including trends, breakdowns by provider/model, and optimization suggestions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Analytics"
                ],
                "summary": "Get cost analytics",
                "parameters": [
                    {
                        "enum": [
                            "1d",
                            "7d",
                            "30d",
                            "90d",
                            "1y"
                        ],
                        "type": "string",
                        "default": "\"30d\"",
                        "description": "Time period for analytics",
                        "name": "period",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Filter by organization ID",
                        "name": "organization_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"proj_1234567890\"",
                        "description": "Filter by project ID",
                        "name": "project_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"production\"",
                        "description": "Filter by environment tag",
                        "name": "environment",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "USD",
                            "EUR",
                            "GBP"
                        ],
                        "type": "string",
                        "default": "\"USD\"",
                        "description": "Currency for cost display",
                        "name": "currency",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cost analytics and optimization insights",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/analytics.CostAnalytics"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/analytics/models": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get performance and usage analytics for AI models including quality scores and cost efficiency",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Analytics"
                ],
                "summary": "Get model analytics",
                "parameters": [
                    {
                        "enum": [
                            "1d",
                            "7d",
                            "30d",
                            "90d",
                            "1y"
                        ],
                        "type": "string",
                        "default": "\"30d\"",
                        "description": "Time period for analytics",
                        "name": "period",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Filter by organization ID",
                        "name": "organization_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"proj_1234567890\"",
                        "description": "Filter by project ID",
                        "name": "project_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"production\"",
                        "description": "Filter by environment tag",
                        "name": "environment",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"openai\"",
                        "description": "Filter by AI provider",
                        "name": "provider",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"gpt-4\"",
                        "description": "Filter by specific model",
                        "name": "model",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "AI model performance analytics",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/analytics.ModelAnalytics"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/analytics/overview": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get high-level analytics overview including total requests, costs, and performance metrics",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Analytics"
                ],
                "summary": "Get analytics overview",
                "parameters": [
                    {
                        "enum": [
                            "1d",
                            "7d",
                            "30d",
                            "90d",
                            "1y"
                        ],
                        "type": "string",
                        "default": "\"30d\"",
                        "description": "Time period for analytics",
                        "name": "period",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Filter by organization ID",
                        "name": "organization_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"proj_1234567890\"",
                        "description": "Filter by project ID",
                        "name": "project_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"production\"",
                        "description": "Filter by environment tag",
                        "name": "environment",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Analytics overview",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/analytics.AnalyticsOverview"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/analytics/providers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get performance analytics for AI providers including latency, success rates, and health scores",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Analytics"
                ],
                "summary": "Get provider analytics",
                "parameters": [
                    {
                        "enum": [
                            "1d",
                            "7d",
                            "30d",
                            "90d",
                            "1y"
                        ],
                        "type": "string",
                        "default": "\"30d\"",
                        "description": "Time period for analytics",
                        "name": "period",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Filter by organization ID",
                        "name": "organization_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"proj_1234567890\"",
                        "description": "Filter by project ID",
                        "name": "project_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"production\"",
                        "description": "Filter by environment tag",
                        "name": "environment",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"openai\"",
                        "description": "Filter by specific provider",
                        "name": "provider",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Provider performance analytics",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/analytics.ProviderAnalytics"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/analytics/requests": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed analytics about AI requests including patterns, providers, models, and success rates",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Analytics"
                ],
                "summary": "Get request analytics",
                "parameters": [
                    {
                        "enum": [
                            "1d",
                            "7d",
                            "30d",
                            "90d",
                            "1y"
                        ],
                        "type": "string",
                        "default": "\"30d\"",
                        "description": "Time period for analytics",
                        "name": "period",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Filter by organization ID",
                        "name": "organization_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"proj_1234567890\"",
                        "description": "Filter by project ID",
                        "name": "project_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"production\"",
                        "description": "Filter by environment tag",
                        "name": "environment",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"openai\"",
                        "description": "Filter by AI provider",
                        "name": "provider",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"gpt-4\"",
                        "description": "Filter by AI model",
                        "name": "model",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request analytics",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/analytics.RequestAnalytics"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/change-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change user password with current password verification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Change password",
                "parameters": [
                    {
                        "description": "Password change information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "$ref": "#/definitions/response.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or wrong current password",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/forgot-password": {
            "post": {
                "description": "Initiate password reset process by sending reset email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Request password reset",
                "parameters": [
                    {
                        "description": "Email for password reset",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.ForgotPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reset email sent if account exists",
                        "schema": {
                            "$ref": "#/definitions/response.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/login": {
            "post": {
                "description": "Authenticate user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_transport_http_handlers_auth.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logout user and invalidate session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User logout",
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "$ref": "#/definitions/response.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid session",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/refresh": {
            "post": {
                "description": "Get a new access token using a valid refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_transport_http_handlers_auth.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token refresh successful",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid refresh token",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/reset-password": {
            "post": {
                "description": "Complete password reset using token from email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "description": "Reset password information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successful",
                        "schema": {
                            "$ref": "#/definitions/response.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or expired token",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/sessions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of user sessions with device info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "List user sessions",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Active sessions only",
                        "name": "active",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sessions retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/sessions/revoke-all": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Revoke all user sessions (logout from all devices). This will invalidate ALL active sessions for the user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Revoke all user sessions",
                "parameters": [
                    {
                        "description": "Request body (currently unused but kept for future extensibility)",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/auth.RevokeAllSessionsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All sessions revoked successfully",
                        "schema": {
                            "$ref": "#/definitions/response.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/sessions/{session_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get details of a specific user session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Get user session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "session_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/sessions/{session_id}/revoke": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Revoke a specific user session (logout from specific device)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Revoke user session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "session_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session revoked successfully",
                        "schema": {
                            "$ref": "#/definitions/response.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/signup": {
            "post": {
                "description": "Register a new user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User registration",
                "parameters": [
                    {
                        "description": "Registration information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_transport_http_handlers_auth.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Registration successful",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Email already exists",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/billing/{orgId}/invoices": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a paginated list of invoices for an organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Billing"
                ],
                "summary": "List organization invoices",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Organization ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "draft",
                            "sent",
                            "paid",
                            "overdue",
                            "void"
                        ],
                        "type": "string",
                        "description": "Filter by invoice status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"2024-01-01T00:00:00Z\"",
                        "description": "Filter invoices from date (RFC3339)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"2024-01-31T23:59:59Z\"",
                        "description": "Filter invoices until date (RFC3339)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of organization invoices with pagination",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/internal_transport_http_handlers_billing.Invoice"
                                            }
                                        },
                                        "meta": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/response.Meta"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "pagination": {
                                                            "$ref": "#/definitions/response.Pagination"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid organization ID or parameters",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions to view billing information",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/billing/{orgId}/subscription": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get current subscription details for an organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Billing"
                ],
                "summary": "Get organization subscription",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Organization ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization subscription details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/billing.Subscription"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid organization ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions to view billing information",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Organization or subscription not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update subscription plan, add-ons, or payment method for an organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Billing"
                ],
                "summary": "Update organization subscription",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Organization ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Subscription update details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/billing.UpdateSubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated subscription details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/billing.Subscription"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid parameters or subscription update not allowed",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions to modify billing information",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Organization or subscription not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity - payment method declined or plan change not allowed",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/billing/{orgId}/usage": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed usage metrics and billing information for an organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Billing"
                ],
                "summary": "Get organization usage metrics",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Organization ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "current",
                            "previous",
                            "custom"
                        ],
                        "type": "string",
                        "default": "\"current\"",
                        "description": "Billing period",
                        "name": "period",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"2024-01-01T00:00:00Z\"",
                        "description": "Custom period start date (RFC3339)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"2024-01-31T23:59:59Z\"",
                        "description": "Custom period end date (RFC3339)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "all",
                            "provider",
                            "project",
                            "environment",
                            "none"
                        ],
                        "type": "string",
                        "default": "\"all\"",
                        "description": "Include usage breakdown",
                        "name": "breakdown",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization usage metrics",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/billing.UsageMetrics"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid organization ID or parameters",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions to view billing information",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/logs/export": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Initiate an export job for AI request logs in various formats (JSON, CSV, Excel)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logs"
                ],
                "summary": "Export AI request logs",
                "parameters": [
                    {
                        "enum": [
                            "json",
                            "csv",
                            "xlsx"
                        ],
                        "type": "string",
                        "example": "\"json\"",
                        "description": "Export format",
                        "name": "format",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"2024-01-01T00:00:00Z\"",
                        "description": "Start time for export (RFC3339)",
                        "name": "start_time",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"2024-01-01T23:59:59Z\"",
                        "description": "End time for export (RFC3339)",
                        "name": "end_time",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Filter by organization ID",
                        "name": "organization_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"proj_1234567890\"",
                        "description": "Filter by project ID",
                        "name": "project_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"env_1234567890\"",
                        "description": "Filter by environment ID",
                        "name": "environment_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"openai\"",
                        "description": "Filter by AI provider",
                        "name": "provider",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"gpt-4\"",
                        "description": "Filter by AI model",
                        "name": "model",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by HTTP status code",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Include request/response bodies in export",
                        "name": "include_body",
                        "in": "query"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Export job initiated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/logs.ExportResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid parameters or date range too large",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions or export quota exceeded",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity - date range exceeds maximum allowed",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/logs/requests": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a paginated list of AI requests with filtering and search capabilities",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logs"
                ],
                "summary": "List AI requests",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Filter by organization ID",
                        "name": "organization_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"proj_1234567890\"",
                        "description": "Filter by project ID",
                        "name": "project_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"env_1234567890\"",
                        "description": "Filter by environment ID",
                        "name": "environment_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"openai\"",
                        "description": "Filter by AI provider",
                        "name": "provider",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"gpt-4\"",
                        "description": "Filter by AI model",
                        "name": "model",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by HTTP status code",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"2024-01-01T00:00:00Z\"",
                        "description": "Start time filter (RFC3339)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"2024-01-01T23:59:59Z\"",
                        "description": "End time filter (RFC3339)",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Minimum latency filter (ms)",
                        "name": "min_latency",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum latency filter (ms)",
                        "name": "max_latency",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by cache hit status",
                        "name": "cache_hit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"error\"",
                        "description": "Search in request content",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 50,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "timestamp",
                            "-timestamp",
                            "latency",
                            "-latency",
                            "cost",
                            "-cost"
                        ],
                        "type": "string",
                        "default": "\"-timestamp\"",
                        "description": "Sort order",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of AI requests",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/logs.ListRequestsResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/logs/requests/{requestId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get comprehensive details about a specific AI request including full trace and routing information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logs"
                ],
                "summary": "Get detailed request information",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"req_1234567890\"",
                        "description": "Request ID",
                        "name": "requestId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Include request/response bodies",
                        "name": "include_body",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Include detailed execution trace",
                        "name": "include_trace",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detailed request information",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/logs.AIRequestDetail"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid request ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions to view this request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Request not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/observability/traces": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a paginated list of LLM observability traces with filtering options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Observability - Traces"
                ],
                "summary": "List traces",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID filter",
                        "name": "project_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "User ID filter",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Session ID filter",
                        "name": "session_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Trace name filter",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "External trace ID filter",
                        "name": "external_trace_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start time filter (RFC3339 format)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End time filter (RFC3339 format)",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Maximum number of results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Number of results to skip",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "created_at",
                        "description": "Sort field",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order (asc/desc)",
                        "name": "sort_order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Traces retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/observability.ListTracesResponse"
                                        },
                                        "meta": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/response.Meta"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "pagination": {
                                                            "$ref": "#/definitions/response.Pagination"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid filter parameters",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/observability/traces/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a specific LLM observability trace by its unique identifier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Observability - Traces"
                ],
                "summary": "Get trace by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trace ID (ULID format)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trace retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/observability.TraceResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid trace ID format",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Trace not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/observability/traces/{id}/observations": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a trace along with all its associated observations (LLM calls, spans, events)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Observability - Traces"
                ],
                "summary": "Get trace with observations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trace ID (ULID format)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trace with observations retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/observability.TraceWithObservationsResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid trace ID format",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Trace not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/observability/traces/{id}/stats": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve aggregated statistics for a specific LLM trace (cost, tokens, latency, etc.)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Observability - Traces"
                ],
                "summary": "Get trace statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trace ID (ULID format)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trace statistics retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/observability.TraceStatsResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid trace ID format",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Trace not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/onboarding/questions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all active onboarding questions with user's current responses",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Onboarding"
                ],
                "summary": "Get onboarding questions",
                "responses": {
                    "200": {
                        "description": "Questions retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/user.OnboardingQuestionsResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/onboarding/responses": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Submit answers to one or more onboarding questions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Onboarding"
                ],
                "summary": "Submit onboarding responses",
                "parameters": [
                    {
                        "description": "Responses to submit",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.SubmitResponsesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Responses submitted successfully",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/onboarding/skip/{id}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Skip a specific onboarding question",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Onboarding"
                ],
                "summary": "Skip onboarding question",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Question ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Question skipped successfully",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid question ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/onboarding/status": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the user's current onboarding progress",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Onboarding"
                ],
                "summary": "Get onboarding status",
                "responses": {
                    "200": {
                        "description": "Status retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/user.OnboardingStatusResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/organizations": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a paginated list of organizations for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "List organizations",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search organizations by name or slug",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of organizations with pagination",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/internal_transport_http_handlers_organization.Organization"
                                            }
                                        },
                                        "meta": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/response.Meta"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "pagination": {
                                                            "$ref": "#/definitions/response.Pagination"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new organization. The authenticated user becomes the organization owner.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Create organization",
                "parameters": [
                    {
                        "description": "Organization details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_transport_http_handlers_organization.CreateOrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Organization created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/internal_transport_http_handlers_organization.Organization"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input or validation errors",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict - organization slug already exists",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/organizations/{orgId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a specific organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Get organization details",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Organization ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/internal_transport_http_handlers_organization.Organization"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid organization ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update organization details. Only owners and admins can update organization settings.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Update organization",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Organization ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated organization details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_transport_http_handlers_organization.UpdateOrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/internal_transport_http_handlers_organization.Organization"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input or validation errors",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions (requires owner or admin role)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Permanently delete an organization. Only organization owners can delete organizations. This action cannot be undone.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Delete organization",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Organization ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Organization deleted successfully"
                    },
                    "400": {
                        "description": "Bad request - invalid organization ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - only organization owners can delete organizations",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict - cannot delete organization with active projects or subscriptions",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/organizations/{orgId}/members": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of all members in an organization, including their roles and status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "List organization members",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Organization ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "active",
                            "invited",
                            "suspended"
                        ],
                        "type": "string",
                        "description": "Filter by member status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "owner",
                            "admin",
                            "developer",
                            "viewer"
                        ],
                        "type": "string",
                        "description": "Filter by member role",
                        "name": "role",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of organization members with pagination",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/organization.OrganizationMember"
                                            }
                                        },
                                        "meta": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/response.Meta"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "pagination": {
                                                            "$ref": "#/definitions/response.Pagination"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid organization ID or query parameters",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions to view members",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Send an invitation to join the organization. Only owners and admins can invite new members.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Invite member to organization",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Organization ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Member invitation details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/organization.InviteMemberRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Member invitation sent successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/organization.OrganizationMember"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input or validation errors",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions (requires owner or admin role)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict - user is already a member or has pending invitation",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/organizations/{orgId}/members/{userId}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a member from the organization or revoke their invitation. Owners and admins can remove members.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Remove member from organization",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Organization ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"usr_1234567890\"",
                        "description": "User ID to remove",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Member removed successfully"
                    },
                    "400": {
                        "description": "Bad request - invalid organization ID or user ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions or cannot remove organization owner",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Organization or member not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/organizations/{orgId}/settings": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all settings for an organization as key-value pairs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization Settings"
                ],
                "summary": "Get all organization settings",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Organization ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization settings retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/organization.SettingsListResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid organization ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new setting for an organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization Settings"
                ],
                "summary": "Create organization setting",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Organization ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Setting details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/organization.CreateSettingRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Setting created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/organization.OrganizationSetting"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input or validation errors",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict - setting key already exists",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/organizations/{orgId}/settings/bulk": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create multiple settings for an organization in a single request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization Settings"
                ],
                "summary": "Bulk create organization settings",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Organization ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Settings to create",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/organization.BulkSettingsRequest"
                        }
                    }
                ],
                "responses": {
                    "501": {
                        "description": "Not implemented",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/organizations/{orgId}/settings/export": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Export all settings for an organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization Settings"
                ],
                "summary": "Export organization settings",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Organization ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "501": {
                        "description": "Not implemented",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/organizations/{orgId}/settings/import": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Import settings for an organization, creating or updating as needed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization Settings"
                ],
                "summary": "Import organization settings",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Organization ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Settings to import",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/organization.BulkSettingsRequest"
                        }
                    }
                ],
                "responses": {
                    "501": {
                        "description": "Not implemented",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/organizations/{orgId}/settings/reset": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Reset all organization settings to default values (removes all current settings)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization Settings"
                ],
                "summary": "Reset organization settings to defaults",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Organization ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "501": {
                        "description": "Not implemented",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/organizations/{orgId}/settings/{key}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific setting by key for an organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization Settings"
                ],
                "summary": "Get specific organization setting",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Organization ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"theme_color\"",
                        "description": "Setting key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Setting retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/organization.OrganizationSetting"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Setting not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing setting for an organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization Settings"
                ],
                "summary": "Update organization setting",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Organization ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"theme_color\"",
                        "description": "Setting key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated setting value",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/organization.UpdateSettingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Setting updated successfully",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input or validation errors",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Setting not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a setting for an organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization Settings"
                ],
                "summary": "Delete organization setting",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Organization ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"theme_color\"",
                        "description": "Setting key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Setting deleted successfully"
                    },
                    "400": {
                        "description": "Bad request - invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Setting not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/projects": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a paginated list of projects accessible to the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "List projects",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"org_1234567890\"",
                        "description": "Filter by organization ID",
                        "name": "organization_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "active",
                            "paused",
                            "archived"
                        ],
                        "type": "string",
                        "description": "Filter by project status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search projects by name or slug",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of projects with pagination",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/project.Project"
                                            }
                                        },
                                        "meta": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/response.Meta"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "pagination": {
                                                            "$ref": "#/definitions/response.Pagination"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new project within an organization. User must have appropriate permissions in the organization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Create project",
                "parameters": [
                    {
                        "description": "Project details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/project.CreateProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Project created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/project.Project"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input or validation errors",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions in organization",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict - project slug already exists in organization",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a specific project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Get project details",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"proj_1234567890\"",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/project.Project"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid project ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update project details. Requires appropriate permissions within the project organization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Update project",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"proj_1234567890\"",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated project details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/project.UpdateProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/project.Project"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input or validation errors",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Permanently delete a project and all associated environments and data. This action cannot be undone.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Delete project",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"proj_1234567890\"",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Project deleted successfully"
                    },
                    "400": {
                        "description": "Bad request - invalid project ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions (requires admin or owner role)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict - cannot delete project with active environments or API usage",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectId}/api-keys": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a paginated list of API keys for a specific project. Keys are shown with preview format (bk_xxxx...yyyy) for security.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "API Keys"
                ],
                "summary": "List API keys",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"proj_01234567890123456789012345\"",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "active",
                            "inactive",
                            "expired"
                        ],
                        "type": "string",
                        "description": "Filter by API key status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of project-scoped API keys with pagination",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/apikey.APIKey"
                                            }
                                        },
                                        "meta": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/response.Meta"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "pagination": {
                                                            "$ref": "#/definitions/response.Pagination"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid project ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions to view API keys",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new industry-standard API key for the project. The full key will only be displayed once upon creation. Format: bk_{40_char_random}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "API Keys"
                ],
                "summary": "Create API key",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"proj_01234567890123456789012345\"",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "API key details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apikey.CreateAPIKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Project-scoped API key created successfully (full key only shown once)",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/apikey.APIKey"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input or validation errors",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions to create API keys",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict - API key name already exists in project",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectId}/api-keys/{keyId}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Permanently revoke and delete a project-scoped API key. This action cannot be undone and will immediately invalidate the key across all environments.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "API Keys"
                ],
                "summary": "Delete project-scoped API key",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"proj_01234567890123456789012345\"",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"key_01234567890123456789012345\"",
                        "description": "API Key ID",
                        "name": "keyId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Project-scoped API key deleted successfully"
                    },
                    "400": {
                        "description": "Bad request - invalid project ID or key ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions to delete API keys",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Project or API key not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the profile information of the currently authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get current user profile",
                "responses": {
                    "200": {
                        "description": "User profile retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/user.UserProfileResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the profile information of the currently authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update current user profile",
                "parameters": [
                    {
                        "description": "Profile update information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_transport_http_handlers_user.UpdateProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile updated successfully",
                        "schema": {
                            "$ref": "#/definitions/user.UserProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Get basic health status of the service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Basic health check",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "schema": {
                            "$ref": "#/definitions/health.HealthResponse"
                        }
                    }
                }
            }
        },
        "/health/live": {
            "get": {
                "description": "Check if service is alive and responsive",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Liveness check",
                "responses": {
                    "200": {
                        "description": "Service is alive and responsive",
                        "schema": {
                            "$ref": "#/definitions/health.HealthResponse"
                        }
                    }
                }
            }
        },
        "/health/ready": {
            "get": {
                "description": "Check if service and all dependencies are ready to handle requests",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Readiness check",
                "responses": {
                    "200": {
                        "description": "Service and all dependencies are ready",
                        "schema": {
                            "$ref": "#/definitions/health.HealthResponse"
                        }
                    },
                    "503": {
                        "description": "Service or dependencies are not ready",
                        "schema": {
                            "$ref": "#/definitions/health.HealthResponse"
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "description": "Retrieve Prometheus-compatible metrics for monitoring and observability",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Monitoring"
                ],
                "summary": "Get Prometheus metrics",
                "responses": {
                    "200": {
                        "description": "Prometheus metrics in text format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/auth/validate-key": {
            "post": {
                "description": "Validates a self-contained API key and extracts project information automatically",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SDK - Authentication"
                ],
                "summary": "Validate API key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API key (format: bk_{40_char_random})",
                        "name": "X-API-Key",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Bearer token format: Bearer {api_key}",
                        "name": "Authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "API key validation successful",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid, inactive, or expired API key",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/cache/invalidate": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Invalidate specific cache entries or clear cache",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SDK - Cache"
                ],
                "summary": "Invalidate cache entries",
                "parameters": [
                    {
                        "description": "Cache invalidation data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ai.InvalidateCacheRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cache invalidated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/ai.InvalidateCacheResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or missing API key",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/cache/status": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get current cache health and statistics",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SDK - Cache"
                ],
                "summary": "Get cache status",
                "responses": {
                    "200": {
                        "description": "Cache status returned",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/ai.CacheStatusResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Invalid or missing API key",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/chat/completions": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Generate AI chat completions using OpenAI-compatible API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI Gateway"
                ],
                "summary": "Create chat completion",
                "parameters": [
                    {
                        "description": "Chat completion request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ai.ChatCompletionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Chat completion generated successfully",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid API key",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/completions": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Generate AI text completions using OpenAI-compatible API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI Gateway"
                ],
                "summary": "Create text completion",
                "parameters": [
                    {
                        "description": "Text completion request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ai.CompletionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Text completion generated successfully",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid API key",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/embeddings": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Generate text embeddings using OpenAI-compatible API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI Gateway"
                ],
                "summary": "Create embeddings",
                "parameters": [
                    {
                        "description": "Embedding request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ai.EmbeddingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Embeddings generated successfully",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid API key",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/models": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get list of available AI models",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI Gateway"
                ],
                "summary": "List available models",
                "responses": {
                    "200": {
                        "description": "List of available models",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ai.Model"
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid API key",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/models/{model}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get detailed information about a specific AI model",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI Gateway"
                ],
                "summary": "Get model information",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"gpt-3.5-turbo\"",
                        "description": "Model ID",
                        "name": "model",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Model information",
                        "schema": {
                            "$ref": "#/definitions/ai.Model"
                        }
                    },
                    "401": {
                        "description": "Invalid API key",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Model not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/route": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Determine optimal AI provider and model for a request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SDK - Routing"
                ],
                "summary": "Make AI routing decision",
                "parameters": [
                    {
                        "description": "Routing request data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ai.RouteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Routing decision returned",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/ai.RouteResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or missing API key",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/telemetry/batch": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Process a batch of telemetry events with ULID-based deduplication and 5x performance optimization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SDK - Telemetry"
                ],
                "summary": "Process high-throughput telemetry batch",
                "parameters": [
                    {
                        "description": "Telemetry batch data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_transport_http_handlers_observability.TelemetryBatchRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Batch processed successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/internal_transport_http_handlers_observability.TelemetryBatchResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/response.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Invalid or missing API key",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/response.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "422": {
                        "description": "Validation failed",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/response.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/response.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/response.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/v1/telemetry/batch/{batch_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get status and details for a specific telemetry batch",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SDK - Telemetry"
                ],
                "summary": "Get telemetry batch status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Batch ID (ULID format)",
                        "name": "batch_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Batch status retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/observability.TelemetryBatchStatusResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid batch ID format",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/response.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Invalid or missing API key",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/response.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Batch not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/response.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/response.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/v1/telemetry/health": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get comprehensive health status of telemetry processing system",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SDK - Telemetry"
                ],
                "summary": "Get telemetry service health status",
                "responses": {
                    "200": {
                        "description": "Health status retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/observability.TelemetryHealthResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Invalid or missing API key",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/response.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/response.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/v1/telemetry/metrics": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get comprehensive metrics for telemetry processing system",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SDK - Telemetry"
                ],
                "summary": "Get telemetry service metrics",
                "responses": {
                    "200": {
                        "description": "Metrics retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/observability.TelemetryMetricsResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Invalid or missing API key",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/response.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/response.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/v1/telemetry/performance": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get performance statistics for telemetry processing over a time window",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SDK - Telemetry"
                ],
                "summary": "Get telemetry performance statistics",
                "parameters": [
                    {
                        "enum": [
                            "1m",
                            "5m",
                            "15m",
                            "1h",
                            "6h",
                            "24h"
                        ],
                        "type": "string",
                        "default": "1h",
                        "description": "Time window for statistics",
                        "name": "window",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Performance stats retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/observability.TelemetryPerformanceStatsResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid time window parameter",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/response.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Invalid or missing API key",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/response.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/response.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/v1/telemetry/validate": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Validate a telemetry event without processing it",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SDK - Telemetry"
                ],
                "summary": "Validate telemetry event structure",
                "parameters": [
                    {
                        "description": "Event to validate",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_transport_http_handlers_observability.TelemetryEventRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event validation result",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/observability.TelemetryValidationResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/response.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Invalid or missing API key",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/response.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "422": {
                        "description": "Validation failed",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/response.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/ws": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Upgrade HTTP connection to WebSocket for real-time updates and notifications",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WebSocket"
                ],
                "summary": "Establish WebSocket connection",
                "responses": {
                    "101": {
                        "description": "WebSocket connection established",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request - WebSocket upgrade failed",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication required",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "admin.RevokeTokenRequest": {
            "description": "Request to revoke a specific access token",
            "type": "object",
            "required": [
                "jti",
                "reason"
            ],
            "properties": {
                "jti": {
                    "type": "string",
                    "example": "01K4FHGHT3XX9WFM293QPZ5G9V"
                },
                "reason": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "security_incident"
                }
            }
        },
        "admin.RevokeUserTokensRequest": {
            "description": "Request to revoke all access tokens for a user",
            "type": "object",
            "required": [
                "reason"
            ],
            "properties": {
                "reason": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "account_compromise"
                }
            }
        },
        "ai.CacheStatusResponse": {
            "description": "Cache health and statistics response",
            "type": "object",
            "properties": {
                "eviction_count": {
                    "type": "integer",
                    "example": 142
                },
                "hit_rate": {
                    "type": "number",
                    "example": 0.85
                },
                "last_eviction": {
                    "type": "integer",
                    "example": 1677610602
                },
                "memory_usage": {
                    "type": "number",
                    "example": 0.45
                },
                "provider_breakdown": {
                    "type": "object",
                    "additionalProperties": true
                },
                "size_bytes": {
                    "type": "integer",
                    "example": 1048576
                },
                "status": {
                    "type": "string",
                    "example": "healthy"
                },
                "total_entries": {
                    "type": "integer",
                    "example": 15420
                }
            }
        },
        "ai.ChatCompletionRequest": {
            "description": "OpenAI-compatible chat completion request",
            "type": "object",
            "properties": {
                "frequency_penalty": {
                    "type": "number",
                    "example": 0
                },
                "logit_bias": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number",
                        "format": "float64"
                    }
                },
                "max_tokens": {
                    "type": "integer",
                    "example": 150
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ai.ChatMessage"
                    }
                },
                "model": {
                    "type": "string",
                    "example": "gpt-3.5-turbo"
                },
                "n": {
                    "type": "integer",
                    "example": 1
                },
                "presence_penalty": {
                    "type": "number",
                    "example": 0
                },
                "stop": {},
                "stream": {
                    "type": "boolean",
                    "example": false
                },
                "temperature": {
                    "type": "number",
                    "example": 0.7
                },
                "top_p": {
                    "type": "number",
                    "example": 1
                },
                "user": {
                    "type": "string",
                    "example": "user-123"
                }
            }
        },
        "ai.ChatMessage": {
            "description": "Single message in a chat conversation",
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "Hello, how are you?"
                },
                "name": {
                    "type": "string",
                    "example": "John"
                },
                "role": {
                    "type": "string",
                    "example": "user"
                }
            }
        },
        "ai.CompletionRequest": {
            "description": "OpenAI-compatible text completion request",
            "type": "object",
            "properties": {
                "best_of": {
                    "type": "integer",
                    "example": 1
                },
                "echo": {
                    "type": "boolean",
                    "example": false
                },
                "frequency_penalty": {
                    "type": "number",
                    "example": 0
                },
                "logit_bias": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number",
                        "format": "float64"
                    }
                },
                "logprobs": {
                    "type": "integer",
                    "example": 0
                },
                "max_tokens": {
                    "type": "integer",
                    "example": 150
                },
                "model": {
                    "type": "string",
                    "example": "gpt-3.5-turbo-instruct"
                },
                "n": {
                    "type": "integer",
                    "example": 1
                },
                "presence_penalty": {
                    "type": "number",
                    "example": 0
                },
                "prompt": {
                    "type": "string",
                    "example": "Once upon a time"
                },
                "stop": {},
                "stream": {
                    "type": "boolean",
                    "example": false
                },
                "temperature": {
                    "type": "number",
                    "example": 0.7
                },
                "top_p": {
                    "type": "number",
                    "example": 1
                },
                "user": {
                    "type": "string",
                    "example": "user-123"
                }
            }
        },
        "ai.EmbeddingRequest": {
            "description": "OpenAI-compatible embedding request",
            "type": "object",
            "properties": {
                "encoding_format": {
                    "type": "string",
                    "example": "float"
                },
                "input": {
                    "type": "string",
                    "example": "The food was delicious and the waiter..."
                },
                "model": {
                    "type": "string",
                    "example": "text-embedding-ada-002"
                },
                "user": {
                    "type": "string",
                    "example": "user-123"
                }
            }
        },
        "ai.InvalidateCacheRequest": {
            "description": "Request data for cache invalidation",
            "type": "object",
            "properties": {
                "clear_all": {
                    "type": "boolean",
                    "example": false
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "max_age": {
                    "type": "integer",
                    "example": 3600
                },
                "model": {
                    "type": "string",
                    "example": "gpt-3.5-turbo"
                },
                "pattern": {
                    "type": "string",
                    "example": "chat:*"
                },
                "provider": {
                    "type": "string",
                    "example": "openai"
                }
            }
        },
        "ai.InvalidateCacheResponse": {
            "description": "Cache invalidation result",
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 25
                },
                "error": {
                    "type": "string"
                },
                "invalidated_keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Cache invalidated successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "ai.Model": {
            "description": "Available AI model information",
            "type": "object",
            "properties": {
                "created": {
                    "type": "integer",
                    "example": 1677610602
                },
                "id": {
                    "type": "string",
                    "example": "gpt-3.5-turbo"
                },
                "object": {
                    "type": "string",
                    "example": "model"
                },
                "owned_by": {
                    "type": "string",
                    "example": "openai"
                }
            }
        },
        "ai.RouteRequest": {
            "description": "Request data for AI routing decisions",
            "type": "object",
            "properties": {
                "max_tokens": {
                    "type": "integer",
                    "example": 150
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ai.ChatMessage"
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "model": {
                    "type": "string",
                    "example": "gpt-3.5-turbo"
                },
                "prompt": {
                    "type": "string",
                    "example": "Hello world"
                },
                "provider": {
                    "type": "string",
                    "example": "openai"
                },
                "strategy": {
                    "type": "string",
                    "example": "cost_optimized"
                },
                "temperature": {
                    "type": "number",
                    "example": 0.7
                }
            }
        },
        "ai.RouteResponse": {
            "description": "AI routing decision response",
            "type": "object",
            "properties": {
                "cache_hit": {
                    "type": "boolean",
                    "example": false
                },
                "endpoint": {
                    "type": "string",
                    "example": "https://api.openai.com/v1/chat/completions"
                },
                "estimated_cost": {
                    "type": "number",
                    "example": 0.0015
                },
                "estimated_latency": {
                    "type": "integer",
                    "example": 250
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "model": {
                    "type": "string",
                    "example": "gpt-3.5-turbo"
                },
                "provider": {
                    "type": "string",
                    "example": "openai"
                },
                "provider_health": {
                    "type": "number",
                    "example": 0.98
                },
                "quality_score": {
                    "type": "number",
                    "example": 0.95
                },
                "strategy": {
                    "type": "string",
                    "example": "cost_optimized"
                }
            }
        },
        "analytics.AnalyticsOverview": {
            "type": "object",
            "properties": {
                "avg_latency_ms": {
                    "type": "number",
                    "example": 850.5
                },
                "cost_today": {
                    "type": "number",
                    "example": 54.2
                },
                "period": {
                    "type": "string",
                    "example": "30d"
                },
                "requests_today": {
                    "type": "integer",
                    "example": 5420
                },
                "success_rate": {
                    "type": "number",
                    "example": 0.987
                },
                "top_model": {
                    "type": "string",
                    "example": "gpt-4"
                },
                "top_provider": {
                    "type": "string",
                    "example": "openai"
                },
                "total_cost": {
                    "type": "number",
                    "example": 1250.75
                },
                "total_requests": {
                    "type": "integer",
                    "example": 125000
                },
                "total_tokens": {
                    "type": "integer",
                    "example": 2500000
                }
            }
        },
        "analytics.BudgetStatus": {
            "type": "object",
            "properties": {
                "budget": {
                    "type": "number",
                    "example": 1000
                },
                "percent": {
                    "type": "number",
                    "example": 0.75
                },
                "projected": {
                    "type": "number",
                    "example": 950.3
                },
                "remaining": {
                    "type": "number",
                    "example": 249.75
                },
                "spent": {
                    "type": "number",
                    "example": 750.25
                },
                "status": {
                    "type": "string",
                    "example": "on_track"
                }
            }
        },
        "analytics.CostAnalytics": {
            "type": "object",
            "properties": {
                "budget_status": {
                    "$ref": "#/definitions/analytics.BudgetStatus"
                },
                "cost_by_model": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/analytics.ModelCostAnalytics"
                    }
                },
                "cost_by_provider": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/analytics.ProviderCostAnalytics"
                    }
                },
                "cost_trend": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/analytics.TimeSeriesDataPoint"
                    }
                },
                "optimizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/analytics.CostOptimizationSuggestion"
                    }
                },
                "time_range": {
                    "type": "string",
                    "example": "30d"
                },
                "total_cost": {
                    "type": "number",
                    "example": 1250.75
                }
            }
        },
        "analytics.CostOptimizationSuggestion": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Switch from gpt-4 to gpt-3.5-turbo for 70% of requests"
                },
                "impact": {
                    "type": "string",
                    "example": "low"
                },
                "potential_savings": {
                    "type": "number",
                    "example": 125.5
                },
                "type": {
                    "type": "string",
                    "example": "model_switch"
                }
            }
        },
        "analytics.HourlyAnalytics": {
            "type": "object",
            "properties": {
                "cost": {
                    "type": "number",
                    "example": 54.2
                },
                "hour": {
                    "type": "integer",
                    "example": 14
                },
                "requests": {
                    "type": "integer",
                    "example": 5420
                }
            }
        },
        "analytics.ModelAnalytics": {
            "type": "object",
            "properties": {
                "avg_latency_ms": {
                    "type": "number",
                    "example": 850.5
                },
                "cost": {
                    "type": "number",
                    "example": 250
                },
                "model": {
                    "type": "string",
                    "example": "gpt-4"
                },
                "provider": {
                    "type": "string",
                    "example": "openai"
                },
                "quality_score": {
                    "type": "number",
                    "example": 0.92
                },
                "requests": {
                    "type": "integer",
                    "example": 25000
                },
                "success_rate": {
                    "type": "number",
                    "example": 0.987
                },
                "tokens": {
                    "type": "integer",
                    "example": 500000
                }
            }
        },
        "analytics.ModelCostAnalytics": {
            "type": "object",
            "properties": {
                "cost": {
                    "type": "number",
                    "example": 250
                },
                "cost_per_token": {
                    "type": "number",
                    "example": 0.0005
                },
                "model": {
                    "type": "string",
                    "example": "gpt-4"
                },
                "percent": {
                    "type": "number",
                    "example": 0.2
                },
                "provider": {
                    "type": "string",
                    "example": "openai"
                }
            }
        },
        "analytics.ProviderAnalytics": {
            "type": "object",
            "properties": {
                "avg_latency_ms": {
                    "type": "number",
                    "example": 750.2
                },
                "cost": {
                    "type": "number",
                    "example": 450
                },
                "health_score": {
                    "type": "number",
                    "example": 0.98
                },
                "provider": {
                    "type": "string",
                    "example": "openai"
                },
                "requests": {
                    "type": "integer",
                    "example": 45000
                },
                "success_rate": {
                    "type": "number",
                    "example": 0.995
                },
                "tokens": {
                    "type": "integer",
                    "example": 900000
                }
            }
        },
        "analytics.ProviderCostAnalytics": {
            "type": "object",
            "properties": {
                "cost": {
                    "type": "number",
                    "example": 450
                },
                "percent": {
                    "type": "number",
                    "example": 0.36
                },
                "provider": {
                    "type": "string",
                    "example": "openai"
                },
                "trend": {
                    "type": "string",
                    "example": "increasing"
                }
            }
        },
        "analytics.RequestAnalytics": {
            "type": "object",
            "properties": {
                "by_model": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/analytics.ModelAnalytics"
                    }
                },
                "by_provider": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/analytics.ProviderAnalytics"
                    }
                },
                "by_status": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/analytics.StatusAnalytics"
                    }
                },
                "hourly_pattern": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/analytics.HourlyAnalytics"
                    }
                },
                "request_counts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/analytics.TimeSeriesDataPoint"
                    }
                },
                "time_range": {
                    "type": "string",
                    "example": "30d"
                }
            }
        },
        "analytics.StatusAnalytics": {
            "type": "object",
            "properties": {
                "percent": {
                    "type": "number",
                    "example": 0.96
                },
                "requests": {
                    "type": "integer",
                    "example": 120000
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "analytics.TimeSeriesDataPoint": {
            "type": "object",
            "properties": {
                "label": {
                    "type": "string",
                    "example": "2024-01-01"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "value": {
                    "type": "number",
                    "example": 1250.5
                }
            }
        },
        "apikey.APIKey": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "created_by": {
                    "type": "string",
                    "example": "usr_01234567890123456789012345"
                },
                "expires_at": {
                    "type": "string",
                    "example": "2024-12-31T23:59:59Z"
                },
                "id": {
                    "type": "string",
                    "example": "key_01234567890123456789012345"
                },
                "key": {
                    "type": "string",
                    "example": "bk_AbCdEfGhIjKlMnOpQrStUvWxYz0123456789AbCd"
                },
                "key_preview": {
                    "type": "string",
                    "example": "bk_AbCd...AbCd"
                },
                "last_used": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "name": {
                    "type": "string",
                    "example": "Production API Key"
                },
                "project_id": {
                    "type": "string",
                    "example": "proj_01234567890123456789012345"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                }
            }
        },
        "apikey.CreateAPIKeyRequest": {
            "type": "object",
            "required": [
                "expiry_option",
                "name"
            ],
            "properties": {
                "expiry_option": {
                    "type": "string",
                    "enum": [
                        "30days",
                        "90days",
                        "never"
                    ],
                    "example": "90days"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2,
                    "example": "Production API Key"
                }
            }
        },
        "auth.ChangePasswordRequest": {
            "description": "Password change information",
            "type": "object",
            "required": [
                "current_password",
                "new_password"
            ],
            "properties": {
                "current_password": {
                    "type": "string",
                    "example": "currentpass123"
                },
                "new_password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "newpass123"
                }
            }
        },
        "auth.ForgotPasswordRequest": {
            "description": "Email for password reset",
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                }
            }
        },
        "auth.ResetPasswordRequest": {
            "description": "Reset password with token",
            "type": "object",
            "required": [
                "new_password",
                "token"
            ],
            "properties": {
                "new_password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "newpassword123"
                },
                "token": {
                    "type": "string",
                    "example": "reset_token_123"
                }
            }
        },
        "auth.RevokeAllSessionsRequest": {
            "type": "object"
        },
        "billing.BillingAlert": {
            "type": "object",
            "properties": {
                "current_value": {
                    "type": "number",
                    "example": 750.25
                },
                "id": {
                    "type": "string",
                    "example": "alert_1234567890"
                },
                "message": {
                    "type": "string",
                    "example": "Monthly cost has reached 80% of limit"
                },
                "severity": {
                    "type": "string",
                    "example": "warning"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                },
                "threshold": {
                    "type": "number",
                    "example": 800
                },
                "triggered_at": {
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "type": {
                    "type": "string",
                    "example": "cost_threshold"
                }
            }
        },
        "billing.BillingPeriod": {
            "type": "object",
            "properties": {
                "end_date": {
                    "type": "string",
                    "example": "2024-01-31T23:59:59Z"
                },
                "start_date": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "status": {
                    "type": "string",
                    "example": "current"
                }
            }
        },
        "billing.DailyUsage": {
            "type": "object",
            "properties": {
                "cost": {
                    "type": "number",
                    "example": 42.15
                },
                "date": {
                    "type": "string",
                    "example": "2024-01-15T00:00:00Z"
                },
                "requests": {
                    "type": "integer",
                    "example": 4200
                },
                "tokens": {
                    "type": "integer",
                    "example": 84000
                }
            }
        },
        "billing.Discount": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "discount_1234567890"
                },
                "name": {
                    "type": "string",
                    "example": "New Customer 20% Off"
                },
                "type": {
                    "type": "string",
                    "example": "percentage"
                },
                "valid_until": {
                    "type": "string",
                    "example": "2024-06-01T00:00:00Z"
                },
                "value": {
                    "type": "number",
                    "example": 20
                }
            }
        },
        "billing.EnvironmentUsage": {
            "type": "object",
            "properties": {
                "cost": {
                    "type": "number",
                    "example": 1000.5
                },
                "environment": {
                    "type": "string",
                    "example": "production"
                },
                "percent": {
                    "type": "number",
                    "example": 0.8
                },
                "requests": {
                    "type": "integer",
                    "example": 100000
                },
                "tokens": {
                    "type": "integer",
                    "example": 2000000
                }
            }
        },
        "billing.ProjectUsage": {
            "type": "object",
            "properties": {
                "cost": {
                    "type": "number",
                    "example": 450.25
                },
                "percent": {
                    "type": "number",
                    "example": 0.36
                },
                "project_id": {
                    "type": "string",
                    "example": "proj_1234567890"
                },
                "project_name": {
                    "type": "string",
                    "example": "AI Chatbot"
                },
                "requests": {
                    "type": "integer",
                    "example": 45000
                },
                "tokens": {
                    "type": "integer",
                    "example": 900000
                }
            }
        },
        "billing.ProviderUsage": {
            "type": "object",
            "properties": {
                "cost": {
                    "type": "number",
                    "example": 750.5
                },
                "percent": {
                    "type": "number",
                    "example": 0.6
                },
                "provider": {
                    "type": "string",
                    "example": "openai"
                },
                "requests": {
                    "type": "integer",
                    "example": 75000
                },
                "tokens": {
                    "type": "integer",
                    "example": 1500000
                }
            }
        },
        "billing.QuotaLimits": {
            "type": "object",
            "properties": {
                "cost_limit": {
                    "type": "number",
                    "example": 1000
                },
                "cost_percent": {
                    "type": "number",
                    "example": 0.75
                },
                "cost_used": {
                    "type": "number",
                    "example": 750.25
                },
                "overage_allowed": {
                    "type": "boolean",
                    "example": true
                },
                "requests_limit": {
                    "type": "integer",
                    "example": 100000
                },
                "requests_percent": {
                    "type": "number",
                    "example": 0.75
                },
                "requests_used": {
                    "type": "integer",
                    "example": 75000
                },
                "tokens_limit": {
                    "type": "integer",
                    "example": 2000000
                },
                "tokens_percent": {
                    "type": "number",
                    "example": 0.75
                },
                "tokens_used": {
                    "type": "integer",
                    "example": 1500000
                }
            }
        },
        "billing.Subscription": {
            "type": "object",
            "properties": {
                "add_ons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/billing.SubscriptionAddOn"
                    }
                },
                "cancel_at": {
                    "type": "string",
                    "example": "2024-12-31T23:59:59Z"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "current_period": {
                    "$ref": "#/definitions/billing.BillingPeriod"
                },
                "discounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/billing.Discount"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "sub_1234567890"
                },
                "next_billing_date": {
                    "type": "string",
                    "example": "2024-02-01T00:00:00Z"
                },
                "organization_id": {
                    "type": "string",
                    "example": "org_1234567890"
                },
                "payment_method": {
                    "$ref": "#/definitions/internal_transport_http_handlers_billing.PaymentMethod"
                },
                "plan": {
                    "$ref": "#/definitions/billing.SubscriptionPlan"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                }
            }
        },
        "billing.SubscriptionAddOn": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "addon_extra_requests"
                },
                "name": {
                    "type": "string",
                    "example": "Extra Requests"
                },
                "price": {
                    "type": "number",
                    "example": 10
                },
                "quantity": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "billing.SubscriptionPlan": {
            "type": "object",
            "properties": {
                "currency": {
                    "type": "string",
                    "example": "USD"
                },
                "features_included": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"advanced_analytics\"",
                        " \"semantic_caching\"]"
                    ]
                },
                "id": {
                    "type": "string",
                    "example": "plan_pro"
                },
                "interval": {
                    "type": "string",
                    "example": "month"
                },
                "name": {
                    "type": "string",
                    "example": "Pro Plan"
                },
                "price": {
                    "type": "number",
                    "example": 29
                },
                "requests_limit": {
                    "type": "integer",
                    "example": 100000
                }
            }
        },
        "billing.UpdateSubscriptionRequest": {
            "type": "object",
            "properties": {
                "add_ons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/billing.SubscriptionAddOn"
                    }
                },
                "cancel_at": {
                    "type": "string",
                    "example": "2024-12-31T23:59:59Z"
                },
                "payment_method_id": {
                    "type": "string",
                    "example": "pm_0987654321"
                },
                "plan_id": {
                    "type": "string",
                    "example": "plan_business"
                }
            }
        },
        "billing.UsageMetrics": {
            "type": "object",
            "properties": {
                "billing_alerts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/billing.BillingAlert"
                    }
                },
                "billing_period": {
                    "$ref": "#/definitions/billing.BillingPeriod"
                },
                "daily_usage": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/billing.DailyUsage"
                    }
                },
                "organization_id": {
                    "type": "string",
                    "example": "org_1234567890"
                },
                "quota_limits": {
                    "$ref": "#/definitions/billing.QuotaLimits"
                },
                "total_cost": {
                    "type": "number",
                    "example": 1250.75
                },
                "total_requests": {
                    "type": "integer",
                    "example": 125000
                },
                "total_tokens": {
                    "type": "integer",
                    "example": 2500000
                },
                "usage_by_environment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/billing.EnvironmentUsage"
                    }
                },
                "usage_by_project": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/billing.ProjectUsage"
                    }
                },
                "usage_by_provider": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/billing.ProviderUsage"
                    }
                }
            }
        },
        "health.HealthCheck": {
            "description": "Individual component health check result",
            "type": "object",
            "properties": {
                "duration": {
                    "type": "string",
                    "example": "5ms"
                },
                "last_checked": {
                    "type": "string",
                    "example": "2023-12-01T10:30:00Z"
                },
                "message": {
                    "type": "string",
                    "example": "Database connection is healthy"
                },
                "status": {
                    "type": "string",
                    "example": "healthy"
                }
            }
        },
        "health.HealthResponse": {
            "description": "Health check response containing service status",
            "type": "object",
            "properties": {
                "checks": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/health.HealthCheck"
                    }
                },
                "status": {
                    "type": "string",
                    "example": "healthy"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2023-12-01T10:30:00Z"
                },
                "uptime": {
                    "type": "string",
                    "example": "2h30m15s"
                },
                "version": {
                    "type": "string",
                    "example": "1.0.0"
                }
            }
        },
        "internal_transport_http_handlers_auth.LoginRequest": {
            "description": "User login credentials",
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "device_info": {
                    "type": "object",
                    "additionalProperties": true
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                }
            }
        },
        "internal_transport_http_handlers_auth.RefreshTokenRequest": {
            "description": "Refresh token credentials",
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "internal_transport_http_handlers_auth.RegisterRequest": {
            "description": "User registration information",
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "example": "John"
                },
                "language": {
                    "type": "string",
                    "example": "en"
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "example": "Doe"
                },
                "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "password123"
                },
                "timezone": {
                    "type": "string",
                    "example": "UTC"
                }
            }
        },
        "internal_transport_http_handlers_billing.Invoice": {
            "type": "object",
            "properties": {
                "billing_period": {
                    "$ref": "#/definitions/billing.BillingPeriod"
                },
                "currency": {
                    "type": "string",
                    "example": "USD"
                },
                "download_url": {
                    "type": "string",
                    "example": "https://invoices.brokle.ai/inv_1234567890.pdf"
                },
                "due_date": {
                    "type": "string",
                    "example": "2024-02-15T23:59:59Z"
                },
                "id": {
                    "type": "string",
                    "example": "inv_1234567890"
                },
                "invoice_number": {
                    "type": "string",
                    "example": "INV-2024-001"
                },
                "issue_date": {
                    "type": "string",
                    "example": "2024-02-01T00:00:00Z"
                },
                "line_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_transport_http_handlers_billing.InvoiceLineItem"
                    }
                },
                "organization_id": {
                    "type": "string",
                    "example": "org_1234567890"
                },
                "paid_date": {
                    "type": "string",
                    "example": "2024-02-10T14:30:00Z"
                },
                "payment_method": {
                    "type": "string",
                    "example": "credit_card"
                },
                "status": {
                    "type": "string",
                    "example": "paid"
                },
                "subtotal": {
                    "type": "number",
                    "example": 1250.75
                },
                "tax_amount": {
                    "type": "number",
                    "example": 125.08
                },
                "total": {
                    "type": "number",
                    "example": 1375.83
                }
            }
        },
        "internal_transport_http_handlers_billing.InvoiceLineItem": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number",
                    "example": 1250
                },
                "description": {
                    "type": "string",
                    "example": "OpenAI GPT-4 Usage"
                },
                "model": {
                    "type": "string",
                    "example": "gpt-4"
                },
                "provider": {
                    "type": "string",
                    "example": "openai"
                },
                "quantity": {
                    "type": "integer",
                    "example": 50000
                },
                "unit_price": {
                    "type": "number",
                    "example": 0.025
                }
            }
        },
        "internal_transport_http_handlers_billing.PaymentMethod": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string",
                    "example": "visa"
                },
                "default": {
                    "type": "boolean",
                    "example": true
                },
                "expiry": {
                    "type": "string",
                    "example": "12/2025"
                },
                "id": {
                    "type": "string",
                    "example": "pm_1234567890"
                },
                "last4": {
                    "type": "string",
                    "example": "1234"
                },
                "type": {
                    "type": "string",
                    "example": "credit_card"
                }
            }
        },
        "internal_transport_http_handlers_observability.TelemetryBatchRequest": {
            "description": "High-performance batch request for telemetry events with ULID-based deduplication",
            "type": "object",
            "required": [
                "events"
            ],
            "properties": {
                "async": {
                    "type": "boolean"
                },
                "deduplication": {
                    "$ref": "#/definitions/observability.DeduplicationConfigRequest"
                },
                "environment": {
                    "type": "string",
                    "example": "production"
                },
                "events": {
                    "type": "array",
                    "maxItems": 1000,
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/internal_transport_http_handlers_observability.TelemetryEventRequest"
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "internal_transport_http_handlers_observability.TelemetryBatchResponse": {
            "description": "Response for high-throughput telemetry batch processing",
            "type": "object",
            "properties": {
                "batch_id": {
                    "type": "string",
                    "example": "01ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                },
                "duplicate_event_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "duplicate_events": {
                    "type": "integer",
                    "example": 3
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_transport_http_handlers_observability.TelemetryEventError"
                    }
                },
                "failed_events": {
                    "type": "integer",
                    "example": 2
                },
                "job_id": {
                    "type": "string",
                    "example": "job_01ABC123"
                },
                "processed_events": {
                    "type": "integer",
                    "example": 95
                },
                "processing_time_ms": {
                    "type": "integer",
                    "example": 123
                }
            }
        },
        "internal_transport_http_handlers_observability.TelemetryEventError": {
            "description": "Error details for failed telemetry event processing",
            "type": "object",
            "properties": {
                "details": {
                    "type": "string"
                },
                "error": {
                    "type": "string",
                    "example": "Invalid payload format"
                },
                "event_id": {
                    "type": "string",
                    "example": "01ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                }
            }
        },
        "internal_transport_http_handlers_observability.TelemetryEventRequest": {
            "description": "Individual telemetry event using envelope pattern for high throughput",
            "type": "object",
            "required": [
                "event_id",
                "event_type",
                "payload"
            ],
            "properties": {
                "event_id": {
                    "type": "string",
                    "example": "01ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                },
                "event_type": {
                    "type": "string",
                    "example": "trace_create"
                },
                "payload": {
                    "type": "object",
                    "additionalProperties": true
                },
                "timestamp": {
                    "type": "integer",
                    "example": 1677610602
                }
            }
        },
        "internal_transport_http_handlers_organization.CreateOrganizationRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 500,
                    "example": "Leading AI solutions provider"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2,
                    "example": "Acme Corporation"
                },
                "slug": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2,
                    "example": "acme-corp"
                }
            }
        },
        "internal_transport_http_handlers_organization.Organization": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "description": {
                    "type": "string",
                    "example": "Leading AI solutions provider"
                },
                "id": {
                    "type": "string",
                    "example": "org_1234567890"
                },
                "name": {
                    "type": "string",
                    "example": "Acme Corporation"
                },
                "owner_id": {
                    "type": "string",
                    "example": "usr_1234567890"
                },
                "plan": {
                    "type": "string",
                    "example": "pro"
                },
                "slug": {
                    "type": "string",
                    "example": "acme-corp"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                }
            }
        },
        "internal_transport_http_handlers_organization.UpdateOrganizationRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 500,
                    "example": "Leading AI solutions provider"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2,
                    "example": "Acme Corporation"
                }
            }
        },
        "internal_transport_http_handlers_user.UpdateProfileRequest": {
            "description": "User profile update information",
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string",
                    "example": "https://example.com/avatar.jpg"
                },
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "language": {
                    "type": "string",
                    "example": "en"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "phone": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "timezone": {
                    "type": "string",
                    "example": "UTC"
                }
            }
        },
        "logs.AIRequest": {
            "type": "object",
            "properties": {
                "api_key_id": {
                    "type": "string",
                    "example": "key_1234567890"
                },
                "cache_hit": {
                    "type": "boolean",
                    "example": false
                },
                "cost": {
                    "type": "number",
                    "example": 0.0425
                },
                "environment_id": {
                    "type": "string",
                    "example": "env_1234567890"
                },
                "error_message": {
                    "type": "string",
                    "example": "Rate limit exceeded"
                },
                "id": {
                    "type": "string",
                    "example": "req_1234567890"
                },
                "ip_address": {
                    "type": "string",
                    "example": "192.168.1.100"
                },
                "latency_ms": {
                    "type": "integer",
                    "example": 850
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "method": {
                    "type": "string",
                    "example": "POST"
                },
                "model": {
                    "type": "string",
                    "example": "gpt-4"
                },
                "organization_id": {
                    "type": "string",
                    "example": "org_1234567890"
                },
                "path": {
                    "type": "string",
                    "example": "/v1/chat/completions"
                },
                "project_id": {
                    "type": "string",
                    "example": "proj_1234567890"
                },
                "provider": {
                    "type": "string",
                    "example": "openai"
                },
                "quality_score": {
                    "type": "number",
                    "example": 0.92
                },
                "request_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                },
                "timestamp": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "tokens_in": {
                    "type": "integer",
                    "example": 150
                },
                "tokens_out": {
                    "type": "integer",
                    "example": 75
                },
                "user_agent": {
                    "type": "string",
                    "example": "MyApp/1.0"
                },
                "user_id": {
                    "type": "string",
                    "example": "usr_1234567890"
                }
            }
        },
        "logs.AIRequestDetail": {
            "type": "object",
            "properties": {
                "api_key_id": {
                    "type": "string",
                    "example": "key_1234567890"
                },
                "cache_hit": {
                    "type": "boolean",
                    "example": false
                },
                "cost": {
                    "type": "number",
                    "example": 0.0425
                },
                "environment_id": {
                    "type": "string",
                    "example": "env_1234567890"
                },
                "error_message": {
                    "type": "string",
                    "example": "Rate limit exceeded"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "req_1234567890"
                },
                "ip_address": {
                    "type": "string",
                    "example": "192.168.1.100"
                },
                "latency_ms": {
                    "type": "integer",
                    "example": 850
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "method": {
                    "type": "string",
                    "example": "POST"
                },
                "model": {
                    "type": "string",
                    "example": "gpt-4"
                },
                "organization_id": {
                    "type": "string",
                    "example": "org_1234567890"
                },
                "path": {
                    "type": "string",
                    "example": "/v1/chat/completions"
                },
                "project_id": {
                    "type": "string",
                    "example": "proj_1234567890"
                },
                "provider": {
                    "type": "string",
                    "example": "openai"
                },
                "quality_score": {
                    "type": "number",
                    "example": 0.92
                },
                "request_body": {},
                "request_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "response_body": {},
                "routing_info": {
                    "$ref": "#/definitions/logs.RoutingInfo"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                },
                "timestamp": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "tokens_in": {
                    "type": "integer",
                    "example": 150
                },
                "tokens_out": {
                    "type": "integer",
                    "example": 75
                },
                "trace": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/logs.TraceEvent"
                    }
                },
                "user_agent": {
                    "type": "string",
                    "example": "MyApp/1.0"
                },
                "user_id": {
                    "type": "string",
                    "example": "usr_1234567890"
                }
            }
        },
        "logs.AlternativeProvider": {
            "type": "object",
            "properties": {
                "provider": {
                    "type": "string",
                    "example": "anthropic"
                },
                "reason": {
                    "type": "string",
                    "example": "Higher latency"
                },
                "score": {
                    "type": "number",
                    "example": 0.85
                }
            }
        },
        "logs.ExportResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "download_url": {
                    "type": "string",
                    "example": "https://exports.brokle.ai/export_1234567890.json"
                },
                "expected_at": {
                    "type": "string",
                    "example": "2024-01-01T00:05:00Z"
                },
                "expires_at": {
                    "type": "string",
                    "example": "2024-01-08T00:00:00Z"
                },
                "job_id": {
                    "type": "string",
                    "example": "export_1234567890"
                },
                "status": {
                    "type": "string",
                    "example": "pending"
                }
            }
        },
        "logs.ListRequestsResponse": {
            "type": "object",
            "properties": {
                "has_more": {
                    "type": "boolean",
                    "example": true
                },
                "limit": {
                    "type": "integer",
                    "example": 50
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/logs.AIRequest"
                    }
                },
                "total": {
                    "type": "integer",
                    "example": 25000
                }
            }
        },
        "logs.RoutingInfo": {
            "type": "object",
            "properties": {
                "alternatives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/logs.AlternativeProvider"
                    }
                },
                "failovers": {
                    "type": "integer",
                    "example": 0
                },
                "reason": {
                    "type": "string",
                    "example": "Provider has lowest latency"
                },
                "routing_time_ms": {
                    "type": "integer",
                    "example": 5
                },
                "strategy": {
                    "type": "string",
                    "example": "performance"
                }
            }
        },
        "logs.TraceEvent": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Starting request to OpenAI"
                },
                "duration_ms": {
                    "type": "integer",
                    "example": 25
                },
                "event": {
                    "type": "string",
                    "example": "provider_request_start"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "timestamp": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                }
            }
        },
        "observability.DatabaseHealthResponse": {
            "description": "Database connectivity and performance status",
            "type": "object",
            "properties": {
                "active_connections": {
                    "type": "integer",
                    "example": 10
                },
                "connected": {
                    "type": "boolean",
                    "example": true
                },
                "latency_ms": {
                    "type": "number",
                    "example": 1.5
                },
                "max_connections": {
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "observability.DeduplicationConfigRequest": {
            "description": "Configuration for event deduplication behavior",
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "fail_on_duplicate": {
                    "type": "boolean"
                },
                "ttl": {
                    "type": "integer",
                    "example": 3600
                },
                "use_redis_cache": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "observability.ListTracesResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "traces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/observability.TraceResponse"
                    }
                }
            }
        },
        "observability.ObservationResponse": {
            "type": "object",
            "properties": {
                "completion_tokens": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "external_observation_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "input": {
                    "type": "object",
                    "additionalProperties": true
                },
                "input_cost": {
                    "type": "number"
                },
                "latency_ms": {
                    "type": "integer"
                },
                "level": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "model_parameters": {
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "type": "string"
                },
                "output": {
                    "type": "object",
                    "additionalProperties": true
                },
                "output_cost": {
                    "type": "number"
                },
                "parent_observation_id": {
                    "type": "string"
                },
                "prompt_tokens": {
                    "type": "integer"
                },
                "provider": {
                    "type": "string"
                },
                "quality_score": {
                    "type": "number"
                },
                "start_time": {
                    "type": "string"
                },
                "status_message": {
                    "type": "string"
                },
                "total_cost": {
                    "type": "number"
                },
                "total_tokens": {
                    "type": "integer"
                },
                "trace_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "observability.QueueHealthResponse": {
            "description": "Processing queue status and performance",
            "type": "object",
            "properties": {
                "average_wait_time_ms": {
                    "type": "number",
                    "example": 10.2
                },
                "oldest_message_age_ms": {
                    "type": "number",
                    "example": 500
                },
                "processing_rate": {
                    "type": "number",
                    "example": 100.5
                },
                "size": {
                    "type": "integer",
                    "example": 150
                }
            }
        },
        "observability.RedisHealthResponse": {
            "description": "Redis connectivity and performance status",
            "type": "object",
            "properties": {
                "available": {
                    "type": "boolean",
                    "example": true
                },
                "connections": {
                    "type": "integer",
                    "example": 5
                },
                "last_error": {
                    "type": "string"
                },
                "latency_ms": {
                    "type": "number",
                    "example": 0.5
                },
                "uptime": {
                    "type": "string",
                    "example": "24h0m0s"
                }
            }
        },
        "observability.TelemetryBatchStatusResponse": {
            "description": "Status information for a telemetry batch",
            "type": "object",
            "properties": {
                "batch_id": {
                    "type": "string",
                    "example": "01ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                },
                "completed_at": {
                    "type": "string",
                    "example": "2023-12-01T10:30:05Z"
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-12-01T10:30:00Z"
                },
                "failed_events": {
                    "type": "integer",
                    "example": 5
                },
                "processed_events": {
                    "type": "integer",
                    "example": 95
                },
                "processing_time_ms": {
                    "type": "integer",
                    "example": 1234
                },
                "status": {
                    "type": "string",
                    "example": "completed"
                },
                "total_events": {
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "observability.TelemetryHealthResponse": {
            "description": "Health status of telemetry processing system",
            "type": "object",
            "properties": {
                "active_workers": {
                    "type": "integer",
                    "example": 5
                },
                "average_processing_time_ms": {
                    "type": "number",
                    "example": 45.7
                },
                "database": {
                    "$ref": "#/definitions/observability.DatabaseHealthResponse"
                },
                "error_rate": {
                    "type": "number",
                    "example": 0.01
                },
                "healthy": {
                    "type": "boolean",
                    "example": true
                },
                "processing_queue": {
                    "$ref": "#/definitions/observability.QueueHealthResponse"
                },
                "redis": {
                    "$ref": "#/definitions/observability.RedisHealthResponse"
                },
                "throughput_per_minute": {
                    "type": "number",
                    "example": 1200.5
                }
            }
        },
        "observability.TelemetryMetricsResponse": {
            "description": "Comprehensive metrics for telemetry processing system",
            "type": "object",
            "properties": {
                "average_events_per_batch": {
                    "type": "number",
                    "example": 100
                },
                "completed_batches": {
                    "type": "integer",
                    "example": 1230
                },
                "deduplication_rate": {
                    "type": "number",
                    "example": 0.4
                },
                "duplicate_events": {
                    "type": "integer",
                    "example": 500
                },
                "failed_batches": {
                    "type": "integer",
                    "example": 15
                },
                "failed_events": {
                    "type": "integer",
                    "example": 1500
                },
                "processed_events": {
                    "type": "integer",
                    "example": 123000
                },
                "processing_batches": {
                    "type": "integer",
                    "example": 5
                },
                "success_rate": {
                    "type": "number",
                    "example": 99.2
                },
                "throughput_per_second": {
                    "type": "number",
                    "example": 85.5
                },
                "total_batches": {
                    "type": "integer",
                    "example": 1250
                },
                "total_events": {
                    "type": "integer",
                    "example": 125000
                }
            }
        },
        "observability.TelemetryPerformanceStatsResponse": {
            "description": "Performance statistics over a time window",
            "type": "object",
            "properties": {
                "average_latency_ms": {
                    "type": "number",
                    "example": 45.7
                },
                "cache_hit_rate": {
                    "type": "number",
                    "example": 0.85
                },
                "database_fallback_rate": {
                    "type": "number",
                    "example": 0.15
                },
                "error_rate": {
                    "type": "number",
                    "example": 0.01
                },
                "p95_latency_ms": {
                    "type": "number",
                    "example": 89.2
                },
                "p99_latency_ms": {
                    "type": "number",
                    "example": 156.8
                },
                "peak_throughput": {
                    "type": "number",
                    "example": 120.3
                },
                "retry_rate": {
                    "type": "number",
                    "example": 0.02
                },
                "successful_requests": {
                    "type": "integer",
                    "example": 1185
                },
                "throughput_per_second": {
                    "type": "number",
                    "example": 85.5
                },
                "time_window": {
                    "type": "string",
                    "example": "1h"
                },
                "total_requests": {
                    "type": "integer",
                    "example": 1200
                }
            }
        },
        "observability.TelemetryValidationResponse": {
            "description": "Result of telemetry event validation",
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "event_id": {
                    "type": "string",
                    "example": "01ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                },
                "event_type": {
                    "type": "string",
                    "example": "trace_create"
                },
                "message": {
                    "type": "string",
                    "example": "Event structure is valid"
                },
                "valid": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "observability.TraceResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "external_trace_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "type": "string"
                },
                "parent_trace_id": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": true
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "observability.TraceStatsResponse": {
            "type": "object",
            "properties": {
                "total_cost": {
                    "type": "number"
                },
                "total_tokens": {
                    "type": "integer"
                },
                "trace_id": {
                    "type": "string"
                }
            }
        },
        "observability.TraceWithObservationsResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "external_trace_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "type": "string"
                },
                "observations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/observability.ObservationResponse"
                    }
                },
                "parent_trace_id": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": true
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "organization.BulkSettingsRequest": {
            "type": "object",
            "required": [
                "settings"
            ],
            "properties": {
                "settings": {
                    "type": "object"
                }
            }
        },
        "organization.CreateSettingRequest": {
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "properties": {
                "key": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1,
                    "example": "theme_color"
                },
                "value": {
                    "type": "object"
                }
            }
        },
        "organization.InviteMemberRequest": {
            "type": "object",
            "required": [
                "email",
                "orgID",
                "role"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@acme.com"
                },
                "orgID": {
                    "type": "string",
                    "example": "01FXYZ123456789ABCDEFGHIJK0"
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "admin",
                        "developer",
                        "viewer"
                    ],
                    "example": "developer"
                }
            }
        },
        "organization.OrganizationMember": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "email": {
                    "type": "string",
                    "example": "john@acme.com"
                },
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "invited_by": {
                    "type": "string",
                    "example": "john@inviter.com"
                },
                "joined_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "role": {
                    "type": "string",
                    "example": "admin"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "user_id": {
                    "type": "string",
                    "example": "usr_1234567890"
                }
            }
        },
        "organization.OrganizationSetting": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "id": {
                    "type": "string",
                    "example": "set_1234567890"
                },
                "key": {
                    "type": "string",
                    "example": "theme_color"
                },
                "organization_id": {
                    "type": "string",
                    "example": "org_1234567890"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "value": {
                    "type": "object"
                }
            }
        },
        "organization.SettingsListResponse": {
            "type": "object",
            "properties": {
                "settings": {
                    "type": "object"
                }
            }
        },
        "organization.UpdateSettingRequest": {
            "type": "object",
            "required": [
                "value"
            ],
            "properties": {
                "value": {
                    "type": "object"
                }
            }
        },
        "project.CreateProjectRequest": {
            "type": "object",
            "required": [
                "name",
                "organization_id"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 500,
                    "example": "Customer support AI chatbot"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2,
                    "example": "AI Chatbot"
                },
                "organization_id": {
                    "type": "string",
                    "example": "org_1234567890"
                },
                "slug": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2,
                    "example": "ai-chatbot"
                }
            }
        },
        "project.Project": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "description": {
                    "type": "string",
                    "example": "Customer support AI chatbot"
                },
                "environments_count": {
                    "type": "integer",
                    "example": 3
                },
                "id": {
                    "type": "string",
                    "example": "proj_1234567890"
                },
                "name": {
                    "type": "string",
                    "example": "AI Chatbot"
                },
                "organization_id": {
                    "type": "string",
                    "example": "org_1234567890"
                },
                "owner_id": {
                    "type": "string",
                    "example": "usr_1234567890"
                },
                "slug": {
                    "type": "string",
                    "example": "ai-chatbot"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                }
            }
        },
        "project.UpdateProjectRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 500,
                    "example": "Customer support AI chatbot"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2,
                    "example": "AI Chatbot"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "active",
                        "paused",
                        "archived"
                    ],
                    "example": "active"
                }
            }
        },
        "response.APIError": {
            "description": "Error details for failed API requests",
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "validation_error"
                },
                "details": {
                    "type": "string",
                    "example": "Field 'email' is required"
                },
                "message": {
                    "type": "string",
                    "example": "Invalid request data"
                },
                "type": {
                    "type": "string",
                    "example": "validation_error"
                }
            }
        },
        "response.APIResponse": {
            "description": "Standard API response wrapper",
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "$ref": "#/definitions/response.APIError"
                },
                "meta": {
                    "$ref": "#/definitions/response.Meta"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "response.ErrorResponse": {
            "description": "Standard error response",
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/response.APIError"
                },
                "meta": {
                    "$ref": "#/definitions/response.Meta"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "response.MessageResponse": {
            "description": "Simple message response for actions",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Operation completed successfully"
                }
            }
        },
        "response.Meta": {
            "description": "Response metadata including request tracking and pagination",
            "type": "object",
            "properties": {
                "pagination": {
                    "$ref": "#/definitions/response.Pagination"
                },
                "request_id": {
                    "type": "string",
                    "example": "req_01h2x3y4z5"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2023-12-01T10:30:00Z"
                },
                "total": {
                    "type": "integer",
                    "example": 150
                },
                "version": {
                    "type": "string",
                    "example": "v1"
                }
            }
        },
        "response.Pagination": {
            "description": "Pagination metadata for paginated API responses",
            "type": "object",
            "properties": {
                "has_next": {
                    "type": "boolean",
                    "example": true
                },
                "has_prev": {
                    "type": "boolean",
                    "example": false
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "page_size": {
                    "type": "integer",
                    "example": 20
                },
                "total": {
                    "type": "integer",
                    "example": 150
                },
                "total_page": {
                    "type": "integer",
                    "example": 8
                }
            }
        },
        "response.SuccessResponse": {
            "description": "Standard successful response",
            "type": "object",
            "properties": {
                "data": {},
                "meta": {
                    "$ref": "#/definitions/response.Meta"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "user.OnboardingQuestionsResponse": {
            "description": "Complete onboarding question information including user's current response",
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "This helps us customize your experience"
                },
                "id": {
                    "type": "string",
                    "example": "01K4FHGHT3XX9WFM293QPZ5G9V"
                },
                "is_required": {
                    "type": "boolean",
                    "example": true
                },
                "is_skipped": {
                    "type": "boolean",
                    "example": false
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"Developer\"",
                        " \"Manager\"",
                        " \"Analyst\"]"
                    ]
                },
                "question_type": {
                    "type": "string",
                    "example": "single_choice"
                },
                "step": {
                    "type": "integer",
                    "example": 1
                },
                "title": {
                    "type": "string",
                    "example": "What is your primary role?"
                },
                "user_answer": {
                    "type": "string",
                    "example": "Developer"
                }
            }
        },
        "user.OnboardingStatusResponse": {
            "description": "User's current onboarding progress and completion status",
            "type": "object",
            "properties": {
                "completed_questions": {
                    "type": "integer",
                    "example": 3
                },
                "current_step": {
                    "type": "integer",
                    "example": 2
                },
                "onboarding_completed": {
                    "type": "boolean",
                    "example": false
                },
                "remaining_questions": {
                    "type": "integer",
                    "example": 1
                },
                "skipped_questions": {
                    "type": "integer",
                    "example": 1
                },
                "total_questions": {
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "user.SubmitResponseRequest": {
            "description": "Request body for submitting a response to an onboarding question",
            "type": "object",
            "required": [
                "question_id"
            ],
            "properties": {
                "question_id": {
                    "type": "string",
                    "example": "01K4FHGHT3XX9WFM293QPZ5G9V"
                },
                "response_value": {
                    "type": "string",
                    "example": "Developer"
                },
                "skipped": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "user.SubmitResponsesRequest": {
            "description": "Request body for submitting multiple onboarding responses at once",
            "type": "object",
            "required": [
                "responses"
            ],
            "properties": {
                "responses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user.SubmitResponseRequest"
                    }
                }
            }
        },
        "user.UserProfileData": {
            "description": "Extended user profile data including bio, location, and social links",
            "type": "object",
            "properties": {
                "bio": {
                    "type": "string",
                    "example": "Software engineer passionate about AI"
                },
                "github_url": {
                    "type": "string",
                    "example": "https://github.com/johndoe"
                },
                "language": {
                    "type": "string",
                    "example": "en"
                },
                "linkedin_url": {
                    "type": "string",
                    "example": "https://linkedin.com/in/johndoe"
                },
                "location": {
                    "type": "string",
                    "example": "San Francisco, CA"
                },
                "theme": {
                    "type": "string",
                    "example": "dark"
                },
                "timezone": {
                    "type": "string",
                    "example": "UTC"
                },
                "twitter_url": {
                    "type": "string",
                    "example": "https://twitter.com/johndoe"
                },
                "website": {
                    "type": "string",
                    "example": "https://johndoe.com"
                }
            }
        },
        "user.UserProfileResponse": {
            "description": "Complete user profile information including basic info and extended profile",
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string",
                    "example": "https://example.com/avatar.jpg"
                },
                "completeness": {
                    "type": "integer",
                    "example": 85
                },
                "created_at": {
                    "type": "string",
                    "example": "2025-01-01T00:00:00Z"
                },
                "default_organization_id": {
                    "type": "string",
                    "example": "01K4FHGHT3XX9WFM293QPZ5G9V"
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "type": "string",
                    "example": "01K4FHGHT3XX9WFM293QPZ5G9V"
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "is_email_verified": {
                    "type": "boolean",
                    "example": true
                },
                "last_login_at": {
                    "type": "string",
                    "example": "2025-01-02T10:30:00Z"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "onboarding_completed": {
                    "type": "boolean",
                    "example": true
                },
                "profile": {
                    "$ref": "#/definitions/user.UserProfileData"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "API key authentication for AI gateway and SDKs. Format: Authorization: Bearer bk_live_... OR X-API-Key: bk_live_... (both supported for flexibility)",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "BearerAuth": {
            "description": "JWT token authentication for web dashboard. Format: Authorization: Bearer \u003cjwt_token\u003e",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "x-extension-openapi": "{\"definitions\": {\"ULID\": {\"type\": \"string\", \"description\": \"ULID (Universally Unique Lexicographically Sortable Identifier)\", \"example\": \"01ARZ3NDEKTSV4RRFFQ69G5FAV\", \"pattern\": \"^[0-9A-Z]{26}$\"}}}"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{"http", "https"},
	Title:            "Brokle AI Control Plane API",
	Description:      "The Open-Source AI Control Plane - See Everything. Control Everything. Observability, routing, and governance for AI.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
