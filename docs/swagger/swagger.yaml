definitions:
  admin.RevokeTokenRequest:
    description: Request to revoke a specific access token
    properties:
      jti:
        example: 01K4FHGHT3XX9WFM293QPZ5G9V
        type: string
      reason:
        example: security_incident
        maxLength: 100
        type: string
    required:
    - jti
    - reason
    type: object
  admin.RevokeUserTokensRequest:
    description: Request to revoke all access tokens for a user
    properties:
      reason:
        example: account_compromise
        maxLength: 100
        type: string
    required:
    - reason
    type: object
  ai.CacheStatusResponse:
    description: Cache health and statistics response
    properties:
      eviction_count:
        example: 142
        type: integer
      hit_rate:
        example: 0.85
        type: number
      last_eviction:
        example: 1677610602
        type: integer
      memory_usage:
        example: 0.45
        type: number
      provider_breakdown:
        additionalProperties: true
        type: object
      size_bytes:
        example: 1048576
        type: integer
      status:
        example: healthy
        type: string
      total_entries:
        example: 15420
        type: integer
    type: object
  ai.ChatCompletionRequest:
    description: OpenAI-compatible chat completion request
    properties:
      frequency_penalty:
        example: 0
        type: number
      logit_bias:
        additionalProperties:
          format: float64
          type: number
        type: object
      max_tokens:
        example: 150
        type: integer
      messages:
        items:
          $ref: '#/definitions/ai.ChatMessage'
        type: array
      model:
        example: gpt-3.5-turbo
        type: string
      "n":
        example: 1
        type: integer
      presence_penalty:
        example: 0
        type: number
      stop: {}
      stream:
        example: false
        type: boolean
      temperature:
        example: 0.7
        type: number
      top_p:
        example: 1
        type: number
      user:
        example: user-123
        type: string
    type: object
  ai.ChatMessage:
    description: Single message in a chat conversation
    properties:
      content:
        example: Hello, how are you?
        type: string
      name:
        example: John
        type: string
      role:
        example: user
        type: string
    type: object
  ai.CompletionRequest:
    description: OpenAI-compatible text completion request
    properties:
      best_of:
        example: 1
        type: integer
      echo:
        example: false
        type: boolean
      frequency_penalty:
        example: 0
        type: number
      logit_bias:
        additionalProperties:
          format: float64
          type: number
        type: object
      logprobs:
        example: 0
        type: integer
      max_tokens:
        example: 150
        type: integer
      model:
        example: gpt-3.5-turbo-instruct
        type: string
      "n":
        example: 1
        type: integer
      presence_penalty:
        example: 0
        type: number
      prompt:
        example: Once upon a time
        type: string
      stop: {}
      stream:
        example: false
        type: boolean
      temperature:
        example: 0.7
        type: number
      top_p:
        example: 1
        type: number
      user:
        example: user-123
        type: string
    type: object
  ai.EmbeddingRequest:
    description: OpenAI-compatible embedding request
    properties:
      encoding_format:
        example: float
        type: string
      input:
        example: The food was delicious and the waiter...
        type: string
      model:
        example: text-embedding-ada-002
        type: string
      user:
        example: user-123
        type: string
    type: object
  ai.InvalidateCacheRequest:
    description: Request data for cache invalidation
    properties:
      clear_all:
        example: false
        type: boolean
      keys:
        items:
          type: string
        type: array
      max_age:
        example: 3600
        type: integer
      model:
        example: gpt-3.5-turbo
        type: string
      pattern:
        example: chat:*
        type: string
      provider:
        example: openai
        type: string
    type: object
  ai.InvalidateCacheResponse:
    description: Cache invalidation result
    properties:
      count:
        example: 25
        type: integer
      error:
        type: string
      invalidated_keys:
        items:
          type: string
        type: array
      message:
        example: Cache invalidated successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  ai.Model:
    description: Available AI model information
    properties:
      created:
        example: 1677610602
        type: integer
      id:
        example: gpt-3.5-turbo
        type: string
      object:
        example: model
        type: string
      owned_by:
        example: openai
        type: string
    type: object
  ai.RouteRequest:
    description: Request data for AI routing decisions
    properties:
      max_tokens:
        example: 150
        type: integer
      messages:
        items:
          $ref: '#/definitions/ai.ChatMessage'
        type: array
      metadata:
        additionalProperties: true
        type: object
      model:
        example: gpt-3.5-turbo
        type: string
      prompt:
        example: Hello world
        type: string
      provider:
        example: openai
        type: string
      strategy:
        example: cost_optimized
        type: string
      temperature:
        example: 0.7
        type: number
    type: object
  ai.RouteResponse:
    description: AI routing decision response
    properties:
      cache_hit:
        example: false
        type: boolean
      endpoint:
        example: https://api.openai.com/v1/chat/completions
        type: string
      estimated_cost:
        example: 0.0015
        type: number
      estimated_latency:
        example: 250
        type: integer
      metadata:
        additionalProperties: true
        type: object
      model:
        example: gpt-3.5-turbo
        type: string
      provider:
        example: openai
        type: string
      provider_health:
        example: 0.98
        type: number
      quality_score:
        example: 0.95
        type: number
      strategy:
        example: cost_optimized
        type: string
    type: object
  analytics.AnalyticsOverview:
    properties:
      avg_latency_ms:
        example: 850.5
        type: number
      cost_today:
        example: 54.2
        type: number
      period:
        example: 30d
        type: string
      requests_today:
        example: 5420
        type: integer
      success_rate:
        example: 0.987
        type: number
      top_model:
        example: gpt-4
        type: string
      top_provider:
        example: openai
        type: string
      total_cost:
        example: 1250.75
        type: number
      total_requests:
        example: 125000
        type: integer
      total_tokens:
        example: 2500000
        type: integer
    type: object
  analytics.BudgetStatus:
    properties:
      budget:
        example: 1000
        type: number
      percent:
        example: 0.75
        type: number
      projected:
        example: 950.3
        type: number
      remaining:
        example: 249.75
        type: number
      spent:
        example: 750.25
        type: number
      status:
        example: on_track
        type: string
    type: object
  analytics.CostAnalytics:
    properties:
      budget_status:
        $ref: '#/definitions/analytics.BudgetStatus'
      cost_by_model:
        items:
          $ref: '#/definitions/analytics.ModelCostAnalytics'
        type: array
      cost_by_provider:
        items:
          $ref: '#/definitions/analytics.ProviderCostAnalytics'
        type: array
      cost_trend:
        items:
          $ref: '#/definitions/analytics.TimeSeriesDataPoint'
        type: array
      optimizations:
        items:
          $ref: '#/definitions/analytics.CostOptimizationSuggestion'
        type: array
      time_range:
        example: 30d
        type: string
      total_cost:
        example: 1250.75
        type: number
    type: object
  analytics.CostOptimizationSuggestion:
    properties:
      description:
        example: Switch from gpt-4 to gpt-3.5-turbo for 70% of requests
        type: string
      impact:
        example: low
        type: string
      potential_savings:
        example: 125.5
        type: number
      type:
        example: model_switch
        type: string
    type: object
  analytics.HourlyAnalytics:
    properties:
      cost:
        example: 54.2
        type: number
      hour:
        example: 14
        type: integer
      requests:
        example: 5420
        type: integer
    type: object
  analytics.ModelAnalytics:
    properties:
      avg_latency_ms:
        example: 850.5
        type: number
      cost:
        example: 250
        type: number
      model:
        example: gpt-4
        type: string
      provider:
        example: openai
        type: string
      quality_score:
        example: 0.92
        type: number
      requests:
        example: 25000
        type: integer
      success_rate:
        example: 0.987
        type: number
      tokens:
        example: 500000
        type: integer
    type: object
  analytics.ModelCostAnalytics:
    properties:
      cost:
        example: 250
        type: number
      cost_per_token:
        example: 0.0005
        type: number
      model:
        example: gpt-4
        type: string
      percent:
        example: 0.2
        type: number
      provider:
        example: openai
        type: string
    type: object
  analytics.ProviderAnalytics:
    properties:
      avg_latency_ms:
        example: 750.2
        type: number
      cost:
        example: 450
        type: number
      health_score:
        example: 0.98
        type: number
      provider:
        example: openai
        type: string
      requests:
        example: 45000
        type: integer
      success_rate:
        example: 0.995
        type: number
      tokens:
        example: 900000
        type: integer
    type: object
  analytics.ProviderCostAnalytics:
    properties:
      cost:
        example: 450
        type: number
      percent:
        example: 0.36
        type: number
      provider:
        example: openai
        type: string
      trend:
        example: increasing
        type: string
    type: object
  analytics.RequestAnalytics:
    properties:
      by_model:
        items:
          $ref: '#/definitions/analytics.ModelAnalytics'
        type: array
      by_provider:
        items:
          $ref: '#/definitions/analytics.ProviderAnalytics'
        type: array
      by_status:
        items:
          $ref: '#/definitions/analytics.StatusAnalytics'
        type: array
      hourly_pattern:
        items:
          $ref: '#/definitions/analytics.HourlyAnalytics'
        type: array
      request_counts:
        items:
          $ref: '#/definitions/analytics.TimeSeriesDataPoint'
        type: array
      time_range:
        example: 30d
        type: string
    type: object
  analytics.StatusAnalytics:
    properties:
      percent:
        example: 0.96
        type: number
      requests:
        example: 120000
        type: integer
      status:
        example: success
        type: string
    type: object
  analytics.TimeSeriesDataPoint:
    properties:
      label:
        example: "2024-01-01"
        type: string
      timestamp:
        example: "2024-01-01T00:00:00Z"
        type: string
      value:
        example: 1250.5
        type: number
    type: object
  apikey.APIKey:
    properties:
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      created_by:
        example: usr_01234567890123456789012345
        type: string
      expires_at:
        example: "2024-12-31T23:59:59Z"
        type: string
      id:
        example: key_01234567890123456789012345
        type: string
      key:
        example: bk_AbCdEfGhIjKlMnOpQrStUvWxYz0123456789AbCd
        type: string
      key_preview:
        example: bk_AbCd...AbCd
        type: string
      last_used:
        example: "2024-01-01T00:00:00Z"
        type: string
      name:
        example: Production API Key
        type: string
      project_id:
        example: proj_01234567890123456789012345
        type: string
      status:
        example: active
        type: string
    type: object
  apikey.CreateAPIKeyRequest:
    properties:
      expiry_option:
        enum:
        - 30days
        - 90days
        - never
        example: 90days
        type: string
      name:
        example: Production API Key
        maxLength: 100
        minLength: 2
        type: string
    required:
    - expiry_option
    - name
    type: object
  auth.ChangePasswordRequest:
    description: Password change information
    properties:
      current_password:
        example: currentpass123
        type: string
      new_password:
        example: newpass123
        minLength: 8
        type: string
    required:
    - current_password
    - new_password
    type: object
  auth.ForgotPasswordRequest:
    description: Email for password reset
    properties:
      email:
        example: user@example.com
        type: string
    required:
    - email
    type: object
  auth.ResetPasswordRequest:
    description: Reset password with token
    properties:
      new_password:
        example: newpassword123
        minLength: 8
        type: string
      token:
        example: reset_token_123
        type: string
    required:
    - new_password
    - token
    type: object
  auth.RevokeAllSessionsRequest:
    type: object
  billing.BillingAlert:
    properties:
      current_value:
        example: 750.25
        type: number
      id:
        example: alert_1234567890
        type: string
      message:
        example: Monthly cost has reached 80% of limit
        type: string
      severity:
        example: warning
        type: string
      status:
        example: active
        type: string
      threshold:
        example: 800
        type: number
      triggered_at:
        example: "2024-01-15T10:30:00Z"
        type: string
      type:
        example: cost_threshold
        type: string
    type: object
  billing.BillingPeriod:
    properties:
      end_date:
        example: "2024-01-31T23:59:59Z"
        type: string
      start_date:
        example: "2024-01-01T00:00:00Z"
        type: string
      status:
        example: current
        type: string
    type: object
  billing.DailyUsage:
    properties:
      cost:
        example: 42.15
        type: number
      date:
        example: "2024-01-15T00:00:00Z"
        type: string
      requests:
        example: 4200
        type: integer
      tokens:
        example: 84000
        type: integer
    type: object
  billing.Discount:
    properties:
      id:
        example: discount_1234567890
        type: string
      name:
        example: New Customer 20% Off
        type: string
      type:
        example: percentage
        type: string
      valid_until:
        example: "2024-06-01T00:00:00Z"
        type: string
      value:
        example: 20
        type: number
    type: object
  billing.EnvironmentUsage:
    properties:
      cost:
        example: 1000.5
        type: number
      environment:
        example: production
        type: string
      percent:
        example: 0.8
        type: number
      requests:
        example: 100000
        type: integer
      tokens:
        example: 2000000
        type: integer
    type: object
  billing.ProjectUsage:
    properties:
      cost:
        example: 450.25
        type: number
      percent:
        example: 0.36
        type: number
      project_id:
        example: proj_1234567890
        type: string
      project_name:
        example: AI Chatbot
        type: string
      requests:
        example: 45000
        type: integer
      tokens:
        example: 900000
        type: integer
    type: object
  billing.ProviderUsage:
    properties:
      cost:
        example: 750.5
        type: number
      percent:
        example: 0.6
        type: number
      provider:
        example: openai
        type: string
      requests:
        example: 75000
        type: integer
      tokens:
        example: 1500000
        type: integer
    type: object
  billing.QuotaLimits:
    properties:
      cost_limit:
        example: 1000
        type: number
      cost_percent:
        example: 0.75
        type: number
      cost_used:
        example: 750.25
        type: number
      overage_allowed:
        example: true
        type: boolean
      requests_limit:
        example: 100000
        type: integer
      requests_percent:
        example: 0.75
        type: number
      requests_used:
        example: 75000
        type: integer
      tokens_limit:
        example: 2000000
        type: integer
      tokens_percent:
        example: 0.75
        type: number
      tokens_used:
        example: 1500000
        type: integer
    type: object
  billing.Subscription:
    properties:
      add_ons:
        items:
          $ref: '#/definitions/billing.SubscriptionAddOn'
        type: array
      cancel_at:
        example: "2024-12-31T23:59:59Z"
        type: string
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      current_period:
        $ref: '#/definitions/billing.BillingPeriod'
      discounts:
        items:
          $ref: '#/definitions/billing.Discount'
        type: array
      id:
        example: sub_1234567890
        type: string
      next_billing_date:
        example: "2024-02-01T00:00:00Z"
        type: string
      organization_id:
        example: org_1234567890
        type: string
      payment_method:
        $ref: '#/definitions/internal_transport_http_handlers_billing.PaymentMethod'
      plan:
        $ref: '#/definitions/billing.SubscriptionPlan'
      status:
        example: active
        type: string
      updated_at:
        example: "2024-01-15T10:30:00Z"
        type: string
    type: object
  billing.SubscriptionAddOn:
    properties:
      id:
        example: addon_extra_requests
        type: string
      name:
        example: Extra Requests
        type: string
      price:
        example: 10
        type: number
      quantity:
        example: 2
        type: integer
    type: object
  billing.SubscriptionPlan:
    properties:
      currency:
        example: USD
        type: string
      features_included:
        example:
        - '["advanced_analytics"'
        - ' "semantic_caching"]'
        items:
          type: string
        type: array
      id:
        example: plan_pro
        type: string
      interval:
        example: month
        type: string
      name:
        example: Pro Plan
        type: string
      price:
        example: 29
        type: number
      requests_limit:
        example: 100000
        type: integer
    type: object
  billing.UpdateSubscriptionRequest:
    properties:
      add_ons:
        items:
          $ref: '#/definitions/billing.SubscriptionAddOn'
        type: array
      cancel_at:
        example: "2024-12-31T23:59:59Z"
        type: string
      payment_method_id:
        example: pm_0987654321
        type: string
      plan_id:
        example: plan_business
        type: string
    type: object
  billing.UsageMetrics:
    properties:
      billing_alerts:
        items:
          $ref: '#/definitions/billing.BillingAlert'
        type: array
      billing_period:
        $ref: '#/definitions/billing.BillingPeriod'
      daily_usage:
        items:
          $ref: '#/definitions/billing.DailyUsage'
        type: array
      organization_id:
        example: org_1234567890
        type: string
      quota_limits:
        $ref: '#/definitions/billing.QuotaLimits'
      total_cost:
        example: 1250.75
        type: number
      total_requests:
        example: 125000
        type: integer
      total_tokens:
        example: 2500000
        type: integer
      usage_by_environment:
        items:
          $ref: '#/definitions/billing.EnvironmentUsage'
        type: array
      usage_by_project:
        items:
          $ref: '#/definitions/billing.ProjectUsage'
        type: array
      usage_by_provider:
        items:
          $ref: '#/definitions/billing.ProviderUsage'
        type: array
    type: object
  health.HealthCheck:
    description: Individual component health check result
    properties:
      duration:
        example: 5ms
        type: string
      last_checked:
        example: "2023-12-01T10:30:00Z"
        type: string
      message:
        example: Database connection is healthy
        type: string
      status:
        example: healthy
        type: string
    type: object
  health.HealthResponse:
    description: Health check response containing service status
    properties:
      checks:
        additionalProperties:
          $ref: '#/definitions/health.HealthCheck'
        type: object
      status:
        example: healthy
        type: string
      timestamp:
        example: "2023-12-01T10:30:00Z"
        type: string
      uptime:
        example: 2h30m15s
        type: string
      version:
        example: 1.0.0
        type: string
    type: object
  internal_transport_http_handlers_auth.LoginRequest:
    description: User login credentials
    properties:
      device_info:
        additionalProperties: true
        type: object
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  internal_transport_http_handlers_auth.RefreshTokenRequest:
    description: Refresh token credentials
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refresh_token
    type: object
  internal_transport_http_handlers_auth.RegisterRequest:
    description: User registration information
    properties:
      email:
        example: user@example.com
        type: string
      first_name:
        example: John
        maxLength: 100
        minLength: 1
        type: string
      language:
        example: en
        type: string
      last_name:
        example: Doe
        maxLength: 100
        minLength: 1
        type: string
      password:
        example: password123
        minLength: 8
        type: string
      timezone:
        example: UTC
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  internal_transport_http_handlers_billing.Invoice:
    properties:
      billing_period:
        $ref: '#/definitions/billing.BillingPeriod'
      currency:
        example: USD
        type: string
      download_url:
        example: https://invoices.brokle.ai/inv_1234567890.pdf
        type: string
      due_date:
        example: "2024-02-15T23:59:59Z"
        type: string
      id:
        example: inv_1234567890
        type: string
      invoice_number:
        example: INV-2024-001
        type: string
      issue_date:
        example: "2024-02-01T00:00:00Z"
        type: string
      line_items:
        items:
          $ref: '#/definitions/internal_transport_http_handlers_billing.InvoiceLineItem'
        type: array
      organization_id:
        example: org_1234567890
        type: string
      paid_date:
        example: "2024-02-10T14:30:00Z"
        type: string
      payment_method:
        example: credit_card
        type: string
      status:
        example: paid
        type: string
      subtotal:
        example: 1250.75
        type: number
      tax_amount:
        example: 125.08
        type: number
      total:
        example: 1375.83
        type: number
    type: object
  internal_transport_http_handlers_billing.InvoiceLineItem:
    properties:
      amount:
        example: 1250
        type: number
      description:
        example: OpenAI GPT-4 Usage
        type: string
      model:
        example: gpt-4
        type: string
      provider:
        example: openai
        type: string
      quantity:
        example: 50000
        type: integer
      unit_price:
        example: 0.025
        type: number
    type: object
  internal_transport_http_handlers_billing.PaymentMethod:
    properties:
      brand:
        example: visa
        type: string
      default:
        example: true
        type: boolean
      expiry:
        example: 12/2025
        type: string
      id:
        example: pm_1234567890
        type: string
      last4:
        example: "1234"
        type: string
      type:
        example: credit_card
        type: string
    type: object
  internal_transport_http_handlers_observability.TelemetryBatchRequest:
    description: High-performance batch request for telemetry events with ULID-based
      deduplication (always enabled with 24h TTL)
    properties:
      async:
        type: boolean
      environment:
        example: production
        type: string
      events:
        items:
          $ref: '#/definitions/internal_transport_http_handlers_observability.TelemetryEventRequest'
        maxItems: 1000
        minItems: 1
        type: array
      metadata:
        additionalProperties: true
        type: object
    required:
    - events
    type: object
  internal_transport_http_handlers_observability.TelemetryBatchResponse:
    description: Response for high-throughput telemetry batch processing
    properties:
      batch_id:
        example: 01ABCDEFGHIJKLMNOPQRSTUVWXYZ
        type: string
      duplicate_event_ids:
        items:
          type: string
        type: array
      duplicate_events:
        example: 3
        type: integer
      errors:
        items:
          $ref: '#/definitions/internal_transport_http_handlers_observability.TelemetryEventError'
        type: array
      failed_events:
        example: 2
        type: integer
      job_id:
        example: job_01ABC123
        type: string
      processed_events:
        example: 95
        type: integer
      processing_time_ms:
        example: 123
        type: integer
    type: object
  internal_transport_http_handlers_observability.TelemetryEventError:
    description: Error details for failed telemetry event processing
    properties:
      details:
        type: string
      error:
        example: Invalid payload format
        type: string
      event_id:
        example: 01ABCDEFGHIJKLMNOPQRSTUVWXYZ
        type: string
    type: object
  internal_transport_http_handlers_observability.TelemetryEventRequest:
    description: Individual telemetry event using envelope pattern for high throughput
    properties:
      event_id:
        example: 01ABCDEFGHIJKLMNOPQRSTUVWXYZ
        type: string
      event_type:
        example: trace
        type: string
      payload:
        additionalProperties: true
        type: object
      timestamp:
        example: 1677610602
        type: integer
    required:
    - event_id
    - event_type
    - payload
    type: object
  internal_transport_http_handlers_organization.CreateOrganizationRequest:
    properties:
      description:
        example: Leading AI solutions provider
        maxLength: 500
        type: string
      name:
        example: Acme Corporation
        maxLength: 100
        minLength: 2
        type: string
      slug:
        example: acme-corp
        maxLength: 50
        minLength: 2
        type: string
    required:
    - name
    type: object
  internal_transport_http_handlers_organization.Organization:
    properties:
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      description:
        example: Leading AI solutions provider
        type: string
      id:
        example: org_1234567890
        type: string
      name:
        example: Acme Corporation
        type: string
      owner_id:
        example: usr_1234567890
        type: string
      plan:
        example: pro
        type: string
      slug:
        example: acme-corp
        type: string
      status:
        example: active
        type: string
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  internal_transport_http_handlers_organization.UpdateOrganizationRequest:
    properties:
      description:
        example: Leading AI solutions provider
        maxLength: 500
        type: string
      name:
        example: Acme Corporation
        maxLength: 100
        minLength: 2
        type: string
    type: object
  internal_transport_http_handlers_user.UpdateProfileRequest:
    description: User profile update information
    properties:
      avatar_url:
        example: https://example.com/avatar.jpg
        type: string
      first_name:
        example: John
        type: string
      language:
        example: en
        type: string
      last_name:
        example: Doe
        type: string
      phone:
        example: "+1234567890"
        type: string
      timezone:
        example: UTC
        type: string
    type: object
  logs.AIRequest:
    properties:
      api_key_id:
        example: key_1234567890
        type: string
      cache_hit:
        example: false
        type: boolean
      cost:
        example: 0.0425
        type: number
      environment_id:
        example: env_1234567890
        type: string
      error_message:
        example: Rate limit exceeded
        type: string
      id:
        example: req_1234567890
        type: string
      ip_address:
        example: 192.168.1.100
        type: string
      latency_ms:
        example: 850
        type: integer
      metadata:
        additionalProperties: true
        type: object
      method:
        example: POST
        type: string
      model:
        example: gpt-4
        type: string
      organization_id:
        example: org_1234567890
        type: string
      path:
        example: /v1/chat/completions
        type: string
      project_id:
        example: proj_1234567890
        type: string
      provider:
        example: openai
        type: string
      quality_score:
        example: 0.92
        type: number
      request_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      status:
        example: 200
        type: integer
      timestamp:
        example: "2024-01-01T00:00:00Z"
        type: string
      tokens_in:
        example: 150
        type: integer
      tokens_out:
        example: 75
        type: integer
      user_agent:
        example: MyApp/1.0
        type: string
      user_id:
        example: usr_1234567890
        type: string
    type: object
  logs.AIRequestDetail:
    properties:
      api_key_id:
        example: key_1234567890
        type: string
      cache_hit:
        example: false
        type: boolean
      cost:
        example: 0.0425
        type: number
      environment_id:
        example: env_1234567890
        type: string
      error_message:
        example: Rate limit exceeded
        type: string
      headers:
        additionalProperties:
          type: string
        type: object
      id:
        example: req_1234567890
        type: string
      ip_address:
        example: 192.168.1.100
        type: string
      latency_ms:
        example: 850
        type: integer
      metadata:
        additionalProperties: true
        type: object
      method:
        example: POST
        type: string
      model:
        example: gpt-4
        type: string
      organization_id:
        example: org_1234567890
        type: string
      path:
        example: /v1/chat/completions
        type: string
      project_id:
        example: proj_1234567890
        type: string
      provider:
        example: openai
        type: string
      quality_score:
        example: 0.92
        type: number
      request_body: {}
      request_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      response_body: {}
      routing_info:
        $ref: '#/definitions/logs.RoutingInfo'
      status:
        example: 200
        type: integer
      timestamp:
        example: "2024-01-01T00:00:00Z"
        type: string
      tokens_in:
        example: 150
        type: integer
      tokens_out:
        example: 75
        type: integer
      trace:
        items:
          $ref: '#/definitions/logs.TraceEvent'
        type: array
      user_agent:
        example: MyApp/1.0
        type: string
      user_id:
        example: usr_1234567890
        type: string
    type: object
  logs.AlternativeProvider:
    properties:
      provider:
        example: anthropic
        type: string
      reason:
        example: Higher latency
        type: string
      score:
        example: 0.85
        type: number
    type: object
  logs.ExportResponse:
    properties:
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      download_url:
        example: https://exports.brokle.ai/export_1234567890.json
        type: string
      expected_at:
        example: "2024-01-01T00:05:00Z"
        type: string
      expires_at:
        example: "2024-01-08T00:00:00Z"
        type: string
      job_id:
        example: export_1234567890
        type: string
      status:
        example: pending
        type: string
    type: object
  logs.ListRequestsResponse:
    properties:
      has_more:
        example: true
        type: boolean
      limit:
        example: 50
        type: integer
      page:
        example: 1
        type: integer
      requests:
        items:
          $ref: '#/definitions/logs.AIRequest'
        type: array
      total:
        example: 25000
        type: integer
    type: object
  logs.RoutingInfo:
    properties:
      alternatives:
        items:
          $ref: '#/definitions/logs.AlternativeProvider'
        type: array
      failovers:
        example: 0
        type: integer
      reason:
        example: Provider has lowest latency
        type: string
      routing_time_ms:
        example: 5
        type: integer
      strategy:
        example: performance
        type: string
    type: object
  logs.TraceEvent:
    properties:
      description:
        example: Starting request to OpenAI
        type: string
      duration_ms:
        example: 25
        type: integer
      event:
        example: provider_request_start
        type: string
      metadata:
        additionalProperties: true
        type: object
      timestamp:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  observability.DatabaseHealthResponse:
    description: Database connectivity and performance status
    properties:
      active_connections:
        example: 10
        type: integer
      connected:
        example: true
        type: boolean
      latency_ms:
        example: 1.5
        type: number
      max_connections:
        example: 100
        type: integer
    type: object
  observability.ListTracesResponse:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
      traces:
        items:
          $ref: '#/definitions/observability.TraceResponse'
        type: array
    type: object
  observability.ObservationResponse:
    properties:
      completion_tokens:
        type: integer
      created_at:
        type: string
      end_time:
        type: string
      external_observation_id:
        type: string
      id:
        type: string
      input:
        additionalProperties: true
        type: object
      input_cost:
        type: number
      latency_ms:
        type: integer
      level:
        type: string
      model:
        type: string
      model_parameters:
        additionalProperties: true
        type: object
      name:
        type: string
      output:
        additionalProperties: true
        type: object
      output_cost:
        type: number
      parent_observation_id:
        type: string
      prompt_tokens:
        type: integer
      provider:
        type: string
      quality_score:
        type: number
      start_time:
        type: string
      status_message:
        type: string
      total_cost:
        type: number
      total_tokens:
        type: integer
      trace_id:
        type: string
      type:
        type: string
      updated_at:
        type: string
      version:
        type: string
    type: object
  observability.QueueHealthResponse:
    description: Processing queue status and performance
    properties:
      average_wait_time_ms:
        example: 10.2
        type: number
      oldest_message_age_ms:
        example: 500
        type: number
      processing_rate:
        example: 100.5
        type: number
      size:
        example: 150
        type: integer
    type: object
  observability.RedisHealthResponse:
    description: Redis connectivity and performance status
    properties:
      available:
        example: true
        type: boolean
      connections:
        example: 5
        type: integer
      last_error:
        type: string
      latency_ms:
        example: 0.5
        type: number
      uptime:
        example: 24h0m0s
        type: string
    type: object
  observability.TelemetryHealthResponse:
    description: Health status of telemetry processing system
    properties:
      active_workers:
        example: 5
        type: integer
      average_processing_time_ms:
        example: 45.7
        type: number
      database:
        $ref: '#/definitions/observability.DatabaseHealthResponse'
      error_rate:
        example: 0.01
        type: number
      healthy:
        example: true
        type: boolean
      processing_queue:
        $ref: '#/definitions/observability.QueueHealthResponse'
      redis:
        $ref: '#/definitions/observability.RedisHealthResponse'
      throughput_per_minute:
        example: 1200.5
        type: number
    type: object
  observability.TelemetryMetricsResponse:
    description: Comprehensive metrics for telemetry processing system
    properties:
      average_events_per_batch:
        example: 100
        type: number
      completed_batches:
        example: 1230
        type: integer
      deduplication_rate:
        example: 0.4
        type: number
      duplicate_events:
        example: 500
        type: integer
      failed_batches:
        example: 15
        type: integer
      failed_events:
        example: 1500
        type: integer
      processed_events:
        example: 123000
        type: integer
      processing_batches:
        example: 5
        type: integer
      success_rate:
        example: 99.2
        type: number
      throughput_per_second:
        example: 85.5
        type: number
      total_batches:
        example: 1250
        type: integer
      total_events:
        example: 125000
        type: integer
    type: object
  observability.TelemetryPerformanceStatsResponse:
    description: Performance statistics over a time window
    properties:
      average_latency_ms:
        example: 45.7
        type: number
      cache_hit_rate:
        example: 0.85
        type: number
      database_fallback_rate:
        example: 0.15
        type: number
      error_rate:
        example: 0.01
        type: number
      p95_latency_ms:
        example: 89.2
        type: number
      p99_latency_ms:
        example: 156.8
        type: number
      peak_throughput:
        example: 120.3
        type: number
      retry_rate:
        example: 0.02
        type: number
      successful_requests:
        example: 1185
        type: integer
      throughput_per_second:
        example: 85.5
        type: number
      time_window:
        example: 1h
        type: string
      total_requests:
        example: 1200
        type: integer
    type: object
  observability.TelemetryValidationResponse:
    description: Result of telemetry event validation
    properties:
      errors:
        items:
          type: string
        type: array
      event_id:
        example: 01ABCDEFGHIJKLMNOPQRSTUVWXYZ
        type: string
      event_type:
        example: trace
        type: string
      message:
        example: Event structure is valid
        type: string
      valid:
        example: true
        type: boolean
    type: object
  observability.TraceResponse:
    properties:
      created_at:
        type: string
      external_trace_id:
        type: string
      id:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      parent_trace_id:
        type: string
      project_id:
        type: string
      session_id:
        type: string
      tags:
        additionalProperties: true
        type: object
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  observability.TraceStatsResponse:
    properties:
      total_cost:
        type: number
      total_tokens:
        type: integer
      trace_id:
        type: string
    type: object
  observability.TraceWithObservationsResponse:
    properties:
      created_at:
        type: string
      external_trace_id:
        type: string
      id:
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      observations:
        items:
          $ref: '#/definitions/observability.ObservationResponse'
        type: array
      parent_trace_id:
        type: string
      project_id:
        type: string
      session_id:
        type: string
      tags:
        additionalProperties: true
        type: object
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  organization.BulkSettingsRequest:
    properties:
      settings:
        type: object
    required:
    - settings
    type: object
  organization.CreateSettingRequest:
    properties:
      key:
        example: theme_color
        maxLength: 255
        minLength: 1
        type: string
      value:
        type: object
    required:
    - key
    - value
    type: object
  organization.InviteMemberRequest:
    properties:
      email:
        example: john@acme.com
        type: string
      orgID:
        example: 01FXYZ123456789ABCDEFGHIJK0
        type: string
      role:
        enum:
        - admin
        - developer
        - viewer
        example: developer
        type: string
    required:
    - email
    - orgID
    - role
    type: object
  organization.OrganizationMember:
    properties:
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      email:
        example: john@acme.com
        type: string
      first_name:
        example: John
        type: string
      invited_by:
        example: john@inviter.com
        type: string
      joined_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      last_name:
        example: Doe
        type: string
      role:
        example: admin
        type: string
      status:
        example: active
        type: string
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      user_id:
        example: usr_1234567890
        type: string
    type: object
  organization.OrganizationSetting:
    properties:
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      id:
        example: set_1234567890
        type: string
      key:
        example: theme_color
        type: string
      organization_id:
        example: org_1234567890
        type: string
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      value:
        type: object
    type: object
  organization.SettingsListResponse:
    properties:
      settings:
        type: object
    type: object
  organization.UpdateSettingRequest:
    properties:
      value:
        type: object
    required:
    - value
    type: object
  project.CreateProjectRequest:
    properties:
      description:
        example: Customer support AI chatbot
        maxLength: 500
        type: string
      name:
        example: AI Chatbot
        maxLength: 100
        minLength: 2
        type: string
      organization_id:
        example: org_1234567890
        type: string
      slug:
        example: ai-chatbot
        maxLength: 50
        minLength: 2
        type: string
    required:
    - name
    - organization_id
    type: object
  project.Project:
    properties:
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      description:
        example: Customer support AI chatbot
        type: string
      environments_count:
        example: 3
        type: integer
      id:
        example: proj_1234567890
        type: string
      name:
        example: AI Chatbot
        type: string
      organization_id:
        example: org_1234567890
        type: string
      owner_id:
        example: usr_1234567890
        type: string
      slug:
        example: ai-chatbot
        type: string
      status:
        example: active
        type: string
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  project.UpdateProjectRequest:
    properties:
      description:
        example: Customer support AI chatbot
        maxLength: 500
        type: string
      name:
        example: AI Chatbot
        maxLength: 100
        minLength: 2
        type: string
      status:
        enum:
        - active
        - paused
        - archived
        example: active
        type: string
    type: object
  response.APIError:
    description: Error details for failed API requests
    properties:
      code:
        example: validation_error
        type: string
      details:
        example: Field 'email' is required
        type: string
      message:
        example: Invalid request data
        type: string
      type:
        example: validation_error
        type: string
    type: object
  response.APIResponse:
    description: Standard API response wrapper
    properties:
      data: {}
      error:
        $ref: '#/definitions/response.APIError'
      meta:
        $ref: '#/definitions/response.Meta'
      success:
        example: true
        type: boolean
    type: object
  response.ErrorResponse:
    description: Standard error response
    properties:
      error:
        $ref: '#/definitions/response.APIError'
      meta:
        $ref: '#/definitions/response.Meta'
      success:
        example: false
        type: boolean
    type: object
  response.MessageResponse:
    description: Simple message response for actions
    properties:
      message:
        example: Operation completed successfully
        type: string
    type: object
  response.Meta:
    description: Response metadata including request tracking and pagination
    properties:
      pagination:
        $ref: '#/definitions/response.Pagination'
      request_id:
        example: req_01h2x3y4z5
        type: string
      timestamp:
        example: "2023-12-01T10:30:00Z"
        type: string
      total:
        example: 150
        type: integer
      version:
        example: v1
        type: string
    type: object
  response.Pagination:
    description: Pagination metadata for paginated API responses
    properties:
      has_next:
        example: true
        type: boolean
      has_prev:
        example: false
        type: boolean
      page:
        example: 1
        type: integer
      page_size:
        example: 20
        type: integer
      total:
        example: 150
        type: integer
      total_page:
        example: 8
        type: integer
    type: object
  response.SuccessResponse:
    description: Standard successful response
    properties:
      data: {}
      meta:
        $ref: '#/definitions/response.Meta'
      success:
        example: true
        type: boolean
    type: object
  user.OnboardingQuestionsResponse:
    description: Complete onboarding question information including user's current
      response
    properties:
      description:
        example: This helps us customize your experience
        type: string
      id:
        example: 01K4FHGHT3XX9WFM293QPZ5G9V
        type: string
      is_required:
        example: true
        type: boolean
      is_skipped:
        example: false
        type: boolean
      options:
        example:
        - '["Developer"'
        - ' "Manager"'
        - ' "Analyst"]'
        items:
          type: string
        type: array
      question_type:
        example: single_choice
        type: string
      step:
        example: 1
        type: integer
      title:
        example: What is your primary role?
        type: string
      user_answer:
        example: Developer
        type: string
    type: object
  user.OnboardingStatusResponse:
    description: User's current onboarding progress and completion status
    properties:
      completed_questions:
        example: 3
        type: integer
      current_step:
        example: 2
        type: integer
      onboarding_completed:
        example: false
        type: boolean
      remaining_questions:
        example: 1
        type: integer
      skipped_questions:
        example: 1
        type: integer
      total_questions:
        example: 5
        type: integer
    type: object
  user.SubmitResponseRequest:
    description: Request body for submitting a response to an onboarding question
    properties:
      question_id:
        example: 01K4FHGHT3XX9WFM293QPZ5G9V
        type: string
      response_value:
        example: Developer
        type: string
      skipped:
        example: false
        type: boolean
    required:
    - question_id
    type: object
  user.SubmitResponsesRequest:
    description: Request body for submitting multiple onboarding responses at once
    properties:
      responses:
        items:
          $ref: '#/definitions/user.SubmitResponseRequest'
        type: array
    required:
    - responses
    type: object
  user.UserProfileData:
    description: Extended user profile data including bio, location, and social links
    properties:
      bio:
        example: Software engineer passionate about AI
        type: string
      github_url:
        example: https://github.com/johndoe
        type: string
      language:
        example: en
        type: string
      linkedin_url:
        example: https://linkedin.com/in/johndoe
        type: string
      location:
        example: San Francisco, CA
        type: string
      theme:
        example: dark
        type: string
      timezone:
        example: UTC
        type: string
      twitter_url:
        example: https://twitter.com/johndoe
        type: string
      website:
        example: https://johndoe.com
        type: string
    type: object
  user.UserProfileResponse:
    description: Complete user profile information including basic info and extended
      profile
    properties:
      avatar_url:
        example: https://example.com/avatar.jpg
        type: string
      completeness:
        example: 85
        type: integer
      created_at:
        example: "2025-01-01T00:00:00Z"
        type: string
      default_organization_id:
        example: 01K4FHGHT3XX9WFM293QPZ5G9V
        type: string
      email:
        example: user@example.com
        type: string
      first_name:
        example: John
        type: string
      id:
        example: 01K4FHGHT3XX9WFM293QPZ5G9V
        type: string
      is_active:
        example: true
        type: boolean
      is_email_verified:
        example: true
        type: boolean
      last_login_at:
        example: "2025-01-02T10:30:00Z"
        type: string
      last_name:
        example: Doe
        type: string
      name:
        example: John Doe
        type: string
      onboarding_completed:
        example: true
        type: boolean
      profile:
        $ref: '#/definitions/user.UserProfileData'
    type: object
host: localhost:8080
info:
  contact:
    email: support@brokle.ai
    name: Brokle Platform Team
    url: https://brokle.ai/support
  description: The Open-Source AI Control Plane - See Everything. Control Everything.
    Observability, routing, and governance for AI.
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  termsOfService: https://brokle.ai/terms
  title: Brokle AI Control Plane API
  version: 1.0.0
paths:
  /api/v1/admin/tokens/blacklisted:
    get:
      description: Get a paginated list of blacklisted tokens with filtering options
      parameters:
      - description: 'Number of tokens to return (default: 50, max: 200)'
        example: 50
        in: query
        name: limit
        type: integer
      - description: 'Number of tokens to skip (default: 0)'
        example: 0
        in: query
        name: offset
        type: integer
      - description: Filter by user ID
        example: '"01K4FHGHT3XX9WFM293QPZ5G9V"'
        in: query
        name: user_id
        type: string
      - description: Filter by revocation reason
        example: '"security_incident"'
        in: query
        name: reason
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Blacklisted tokens list
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: List blacklisted tokens
      tags:
      - Admin
      - Token Management
  /api/v1/admin/tokens/revoke:
    post:
      consumes:
      - application/json
      description: Immediately revoke a specific access token by JTI
      parameters:
      - description: Token revocation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/admin.RevokeTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token revoked successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Revoke specific token
      tags:
      - Admin
      - Token Management
  /api/v1/admin/tokens/stats:
    get:
      description: Get comprehensive statistics about token usage and revocation
      produces:
      - application/json
      responses:
        "200":
          description: Token statistics
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get token statistics
      tags:
      - Admin
      - Token Management
  /api/v1/admin/users/{userID}/tokens/revoke:
    post:
      consumes:
      - application/json
      description: Immediately revoke all active access tokens for a specific user
      parameters:
      - description: User ID
        example: '"01K4FHGHT3XX9WFM293QPZ5G9V"'
        in: path
        name: userID
        required: true
        type: string
      - description: User token revocation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/admin.RevokeUserTokensRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User tokens revoked successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Revoke all user tokens
      tags:
      - Admin
      - Token Management
  /api/v1/analytics/costs:
    get:
      consumes:
      - application/json
      description: Get detailed cost analytics including trends, breakdowns by provider/model,
        and optimization suggestions
      parameters:
      - default: '"30d"'
        description: Time period for analytics
        enum:
        - 1d
        - 7d
        - 30d
        - 90d
        - 1y
        in: query
        name: period
        type: string
      - description: Filter by organization ID
        example: '"org_1234567890"'
        in: query
        name: organization_id
        type: string
      - description: Filter by project ID
        example: '"proj_1234567890"'
        in: query
        name: project_id
        type: string
      - description: Filter by environment tag
        example: '"production"'
        in: query
        name: environment
        type: string
      - default: '"USD"'
        description: Currency for cost display
        enum:
        - USD
        - EUR
        - GBP
        in: query
        name: currency
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Cost analytics and optimization insights
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/analytics.CostAnalytics'
              type: object
        "400":
          description: Bad request - invalid query parameters
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get cost analytics
      tags:
      - Analytics
  /api/v1/analytics/models:
    get:
      consumes:
      - application/json
      description: Get performance and usage analytics for AI models including quality
        scores and cost efficiency
      parameters:
      - default: '"30d"'
        description: Time period for analytics
        enum:
        - 1d
        - 7d
        - 30d
        - 90d
        - 1y
        in: query
        name: period
        type: string
      - description: Filter by organization ID
        example: '"org_1234567890"'
        in: query
        name: organization_id
        type: string
      - description: Filter by project ID
        example: '"proj_1234567890"'
        in: query
        name: project_id
        type: string
      - description: Filter by environment tag
        example: '"production"'
        in: query
        name: environment
        type: string
      - description: Filter by AI provider
        example: '"openai"'
        in: query
        name: provider
        type: string
      - description: Filter by specific model
        example: '"gpt-4"'
        in: query
        name: model
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: AI model performance analytics
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/analytics.ModelAnalytics'
                  type: array
              type: object
        "400":
          description: Bad request - invalid query parameters
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get model analytics
      tags:
      - Analytics
  /api/v1/analytics/overview:
    get:
      consumes:
      - application/json
      description: Get high-level analytics overview including total requests, costs,
        and performance metrics
      parameters:
      - default: '"30d"'
        description: Time period for analytics
        enum:
        - 1d
        - 7d
        - 30d
        - 90d
        - 1y
        in: query
        name: period
        type: string
      - description: Filter by organization ID
        example: '"org_1234567890"'
        in: query
        name: organization_id
        type: string
      - description: Filter by project ID
        example: '"proj_1234567890"'
        in: query
        name: project_id
        type: string
      - description: Filter by environment tag
        example: '"production"'
        in: query
        name: environment
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Analytics overview
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/analytics.AnalyticsOverview'
              type: object
        "400":
          description: Bad request - invalid query parameters
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get analytics overview
      tags:
      - Analytics
  /api/v1/analytics/providers:
    get:
      consumes:
      - application/json
      description: Get performance analytics for AI providers including latency, success
        rates, and health scores
      parameters:
      - default: '"30d"'
        description: Time period for analytics
        enum:
        - 1d
        - 7d
        - 30d
        - 90d
        - 1y
        in: query
        name: period
        type: string
      - description: Filter by organization ID
        example: '"org_1234567890"'
        in: query
        name: organization_id
        type: string
      - description: Filter by project ID
        example: '"proj_1234567890"'
        in: query
        name: project_id
        type: string
      - description: Filter by environment tag
        example: '"production"'
        in: query
        name: environment
        type: string
      - description: Filter by specific provider
        example: '"openai"'
        in: query
        name: provider
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Provider performance analytics
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/analytics.ProviderAnalytics'
                  type: array
              type: object
        "400":
          description: Bad request - invalid query parameters
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get provider analytics
      tags:
      - Analytics
  /api/v1/analytics/requests:
    get:
      consumes:
      - application/json
      description: Get detailed analytics about AI requests including patterns, providers,
        models, and success rates
      parameters:
      - default: '"30d"'
        description: Time period for analytics
        enum:
        - 1d
        - 7d
        - 30d
        - 90d
        - 1y
        in: query
        name: period
        type: string
      - description: Filter by organization ID
        example: '"org_1234567890"'
        in: query
        name: organization_id
        type: string
      - description: Filter by project ID
        example: '"proj_1234567890"'
        in: query
        name: project_id
        type: string
      - description: Filter by environment tag
        example: '"production"'
        in: query
        name: environment
        type: string
      - description: Filter by AI provider
        example: '"openai"'
        in: query
        name: provider
        type: string
      - description: Filter by AI model
        example: '"gpt-4"'
        in: query
        name: model
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Request analytics
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/analytics.RequestAnalytics'
              type: object
        "400":
          description: Bad request - invalid query parameters
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get request analytics
      tags:
      - Analytics
  /api/v1/auth/change-password:
    post:
      consumes:
      - application/json
      description: Change user password with current password verification
      parameters:
      - description: Password change information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "400":
          description: Invalid request or wrong current password
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change password
      tags:
      - Authentication
  /api/v1/auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Initiate password reset process by sending reset email
      parameters:
      - description: Email for password reset
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Reset email sent if account exists
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Request password reset
      tags:
      - Authentication
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_transport_http_handlers_auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: User login
      tags:
      - Authentication
  /api/v1/auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user and invalidate session
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "401":
          description: Invalid session
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - Authentication
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token using a valid refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_transport_http_handlers_auth.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refresh successful
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Refresh access token
      tags:
      - Authentication
  /api/v1/auth/reset-password:
    post:
      consumes:
      - application/json
      description: Complete password reset using token from email
      parameters:
      - description: Reset password information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successful
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "400":
          description: Invalid request payload or expired token
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Reset password
      tags:
      - Authentication
  /api/v1/auth/sessions:
    get:
      consumes:
      - application/json
      description: Get paginated list of user sessions with device info
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: page_size
        type: integer
      - default: false
        description: Active sessions only
        in: query
        name: active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Sessions retrieved successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List user sessions
      tags:
      - Authentication
  /api/v1/auth/sessions/{session_id}:
    get:
      consumes:
      - application/json
      description: Get details of a specific user session
      parameters:
      - description: Session ID
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Session retrieved successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Session not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user session
      tags:
      - Authentication
  /api/v1/auth/sessions/{session_id}/revoke:
    post:
      consumes:
      - application/json
      description: Revoke a specific user session (logout from specific device)
      parameters:
      - description: Session ID
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Session revoked successfully
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Session not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Revoke user session
      tags:
      - Authentication
  /api/v1/auth/sessions/revoke-all:
    post:
      consumes:
      - application/json
      description: Revoke all user sessions (logout from all devices). This will invalidate
        ALL active sessions for the user.
      parameters:
      - description: Request body (currently unused but kept for future extensibility)
        in: body
        name: request
        schema:
          $ref: '#/definitions/auth.RevokeAllSessionsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: All sessions revoked successfully
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Revoke all user sessions
      tags:
      - Authentication
  /api/v1/auth/signup:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: Registration information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_transport_http_handlers_auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Registration successful
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Email already exists
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: User registration
      tags:
      - Authentication
  /api/v1/billing/{orgId}/invoices:
    get:
      consumes:
      - application/json
      description: Get a paginated list of invoices for an organization
      parameters:
      - description: Organization ID
        example: '"org_1234567890"'
        in: path
        name: orgId
        required: true
        type: string
      - description: Filter by invoice status
        enum:
        - draft
        - sent
        - paid
        - overdue
        - void
        in: query
        name: status
        type: string
      - description: Filter invoices from date (RFC3339)
        example: '"2024-01-01T00:00:00Z"'
        in: query
        name: start_date
        type: string
      - description: Filter invoices until date (RFC3339)
        example: '"2024-01-31T23:59:59Z"'
        in: query
        name: end_date
        type: string
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of organization invoices with pagination
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/internal_transport_http_handlers_billing.Invoice'
                  type: array
                meta:
                  allOf:
                  - $ref: '#/definitions/response.Meta'
                  - properties:
                      pagination:
                        $ref: '#/definitions/response.Pagination'
                    type: object
              type: object
        "400":
          description: Bad request - invalid organization ID or parameters
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions to view billing information
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List organization invoices
      tags:
      - Billing
  /api/v1/billing/{orgId}/subscription:
    get:
      consumes:
      - application/json
      description: Get current subscription details for an organization
      parameters:
      - description: Organization ID
        example: '"org_1234567890"'
        in: path
        name: orgId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Organization subscription details
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/billing.Subscription'
              type: object
        "400":
          description: Bad request - invalid organization ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions to view billing information
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Organization or subscription not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get organization subscription
      tags:
      - Billing
    post:
      consumes:
      - application/json
      description: Update subscription plan, add-ons, or payment method for an organization
      parameters:
      - description: Organization ID
        example: '"org_1234567890"'
        in: path
        name: orgId
        required: true
        type: string
      - description: Subscription update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/billing.UpdateSubscriptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated subscription details
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/billing.Subscription'
              type: object
        "400":
          description: Bad request - invalid parameters or subscription update not
            allowed
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions to modify billing information
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Organization or subscription not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Unprocessable entity - payment method declined or plan change
            not allowed
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update organization subscription
      tags:
      - Billing
  /api/v1/billing/{orgId}/usage:
    get:
      consumes:
      - application/json
      description: Get detailed usage metrics and billing information for an organization
      parameters:
      - description: Organization ID
        example: '"org_1234567890"'
        in: path
        name: orgId
        required: true
        type: string
      - default: '"current"'
        description: Billing period
        enum:
        - current
        - previous
        - custom
        in: query
        name: period
        type: string
      - description: Custom period start date (RFC3339)
        example: '"2024-01-01T00:00:00Z"'
        in: query
        name: start_date
        type: string
      - description: Custom period end date (RFC3339)
        example: '"2024-01-31T23:59:59Z"'
        in: query
        name: end_date
        type: string
      - default: '"all"'
        description: Include usage breakdown
        enum:
        - all
        - provider
        - project
        - environment
        - none
        in: query
        name: breakdown
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Organization usage metrics
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/billing.UsageMetrics'
              type: object
        "400":
          description: Bad request - invalid organization ID or parameters
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions to view billing information
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get organization usage metrics
      tags:
      - Billing
  /api/v1/logs/export:
    get:
      consumes:
      - application/json
      description: Initiate an export job for AI request logs in various formats (JSON,
        CSV, Excel)
      parameters:
      - description: Export format
        enum:
        - json
        - csv
        - xlsx
        example: '"json"'
        in: query
        name: format
        required: true
        type: string
      - description: Start time for export (RFC3339)
        example: '"2024-01-01T00:00:00Z"'
        in: query
        name: start_time
        required: true
        type: string
      - description: End time for export (RFC3339)
        example: '"2024-01-01T23:59:59Z"'
        in: query
        name: end_time
        required: true
        type: string
      - description: Filter by organization ID
        example: '"org_1234567890"'
        in: query
        name: organization_id
        type: string
      - description: Filter by project ID
        example: '"proj_1234567890"'
        in: query
        name: project_id
        type: string
      - description: Filter by environment ID
        example: '"env_1234567890"'
        in: query
        name: environment_id
        type: string
      - description: Filter by AI provider
        example: '"openai"'
        in: query
        name: provider
        type: string
      - description: Filter by AI model
        example: '"gpt-4"'
        in: query
        name: model
        type: string
      - description: Filter by HTTP status code
        in: query
        name: status
        type: integer
      - default: false
        description: Include request/response bodies in export
        in: query
        name: include_body
        type: boolean
      produces:
      - application/json
      responses:
        "202":
          description: Export job initiated
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/logs.ExportResponse'
              type: object
        "400":
          description: Bad request - invalid parameters or date range too large
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions or export quota exceeded
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Unprocessable entity - date range exceeds maximum allowed
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Export AI request logs
      tags:
      - Logs
  /api/v1/logs/requests:
    get:
      consumes:
      - application/json
      description: Get a paginated list of AI requests with filtering and search capabilities
      parameters:
      - description: Filter by organization ID
        example: '"org_1234567890"'
        in: query
        name: organization_id
        type: string
      - description: Filter by project ID
        example: '"proj_1234567890"'
        in: query
        name: project_id
        type: string
      - description: Filter by environment ID
        example: '"env_1234567890"'
        in: query
        name: environment_id
        type: string
      - description: Filter by AI provider
        example: '"openai"'
        in: query
        name: provider
        type: string
      - description: Filter by AI model
        example: '"gpt-4"'
        in: query
        name: model
        type: string
      - description: Filter by HTTP status code
        in: query
        name: status
        type: integer
      - description: Start time filter (RFC3339)
        example: '"2024-01-01T00:00:00Z"'
        in: query
        name: start_time
        type: string
      - description: End time filter (RFC3339)
        example: '"2024-01-01T23:59:59Z"'
        in: query
        name: end_time
        type: string
      - description: Minimum latency filter (ms)
        in: query
        name: min_latency
        type: integer
      - description: Maximum latency filter (ms)
        in: query
        name: max_latency
        type: integer
      - description: Filter by cache hit status
        in: query
        name: cache_hit
        type: boolean
      - description: Search in request content
        example: '"error"'
        in: query
        name: search
        type: string
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 50
        description: Items per page
        in: query
        maximum: 1000
        minimum: 1
        name: limit
        type: integer
      - default: '"-timestamp"'
        description: Sort order
        enum:
        - timestamp
        - -timestamp
        - latency
        - -latency
        - cost
        - -cost
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of AI requests
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/logs.ListRequestsResponse'
              type: object
        "400":
          description: Bad request - invalid query parameters
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List AI requests
      tags:
      - Logs
  /api/v1/logs/requests/{requestId}:
    get:
      consumes:
      - application/json
      description: Get comprehensive details about a specific AI request including
        full trace and routing information
      parameters:
      - description: Request ID
        example: '"req_1234567890"'
        in: path
        name: requestId
        required: true
        type: string
      - default: false
        description: Include request/response bodies
        in: query
        name: include_body
        type: boolean
      - default: false
        description: Include detailed execution trace
        in: query
        name: include_trace
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Detailed request information
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/logs.AIRequestDetail'
              type: object
        "400":
          description: Bad request - invalid request ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions to view this request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Request not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get detailed request information
      tags:
      - Logs
  /api/v1/observability/traces:
    get:
      consumes:
      - application/json
      description: Get a paginated list of LLM observability traces with filtering
        options
      parameters:
      - description: Project ID filter
        in: query
        name: project_id
        type: string
      - description: User ID filter
        in: query
        name: user_id
        type: string
      - description: Session ID filter
        in: query
        name: session_id
        type: string
      - description: Trace name filter
        in: query
        name: name
        type: string
      - description: External trace ID filter
        in: query
        name: external_trace_id
        type: string
      - description: Start time filter (RFC3339 format)
        in: query
        name: start_time
        type: string
      - description: End time filter (RFC3339 format)
        in: query
        name: end_time
        type: string
      - default: 50
        description: Maximum number of results
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of results to skip
        in: query
        name: offset
        type: integer
      - default: created_at
        description: Sort field
        in: query
        name: sort_by
        type: string
      - default: desc
        description: Sort order (asc/desc)
        in: query
        name: sort_order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Traces retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/observability.ListTracesResponse'
                meta:
                  allOf:
                  - $ref: '#/definitions/response.Meta'
                  - properties:
                      pagination:
                        $ref: '#/definitions/response.Pagination'
                    type: object
              type: object
        "400":
          description: Invalid filter parameters
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List traces
      tags:
      - Observability - Traces
  /api/v1/observability/traces/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific LLM observability trace by its unique identifier
      parameters:
      - description: Trace ID (ULID format)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Trace retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/observability.TraceResponse'
              type: object
        "400":
          description: Invalid trace ID format
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Trace not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get trace by ID
      tags:
      - Observability - Traces
  /api/v1/observability/traces/{id}/observations:
    get:
      consumes:
      - application/json
      description: Retrieve a trace along with all its associated observations (LLM
        calls, spans, events)
      parameters:
      - description: Trace ID (ULID format)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Trace with observations retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/observability.TraceWithObservationsResponse'
              type: object
        "400":
          description: Invalid trace ID format
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Trace not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get trace with observations
      tags:
      - Observability - Traces
  /api/v1/observability/traces/{id}/stats:
    get:
      consumes:
      - application/json
      description: Retrieve aggregated statistics for a specific LLM trace (cost,
        tokens, latency, etc.)
      parameters:
      - description: Trace ID (ULID format)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Trace statistics retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/observability.TraceStatsResponse'
              type: object
        "400":
          description: Invalid trace ID format
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Trace not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get trace statistics
      tags:
      - Observability - Traces
  /api/v1/onboarding/questions:
    get:
      consumes:
      - application/json
      description: Retrieves all active onboarding questions with user's current responses
      produces:
      - application/json
      responses:
        "200":
          description: Questions retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/user.OnboardingQuestionsResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get onboarding questions
      tags:
      - Onboarding
  /api/v1/onboarding/responses:
    post:
      consumes:
      - application/json
      description: Submit answers to one or more onboarding questions
      parameters:
      - description: Responses to submit
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.SubmitResponsesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Responses submitted successfully
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Submit onboarding responses
      tags:
      - Onboarding
  /api/v1/onboarding/skip/{id}:
    post:
      consumes:
      - application/json
      description: Skip a specific onboarding question
      parameters:
      - description: Question ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Question skipped successfully
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Invalid question ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Skip onboarding question
      tags:
      - Onboarding
  /api/v1/onboarding/status:
    get:
      consumes:
      - application/json
      description: Get the user's current onboarding progress
      produces:
      - application/json
      responses:
        "200":
          description: Status retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/user.OnboardingStatusResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get onboarding status
      tags:
      - Onboarding
  /api/v1/organizations:
    get:
      consumes:
      - application/json
      description: Get a paginated list of organizations for the authenticated user
      parameters:
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - description: Search organizations by name or slug
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of organizations with pagination
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/internal_transport_http_handlers_organization.Organization'
                  type: array
                meta:
                  allOf:
                  - $ref: '#/definitions/response.Meta'
                  - properties:
                      pagination:
                        $ref: '#/definitions/response.Pagination'
                    type: object
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List organizations
      tags:
      - Organizations
    post:
      consumes:
      - application/json
      description: Create a new organization. The authenticated user becomes the organization
        owner.
      parameters:
      - description: Organization details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_transport_http_handlers_organization.CreateOrganizationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Organization created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/internal_transport_http_handlers_organization.Organization'
              type: object
        "400":
          description: Bad request - invalid input or validation errors
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict - organization slug already exists
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create organization
      tags:
      - Organizations
  /api/v1/organizations/{orgId}:
    delete:
      consumes:
      - application/json
      description: Permanently delete an organization. Only organization owners can
        delete organizations. This action cannot be undone.
      parameters:
      - description: Organization ID
        example: '"org_1234567890"'
        in: path
        name: orgId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Organization deleted successfully
        "400":
          description: Bad request - invalid organization ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - only organization owners can delete organizations
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict - cannot delete organization with active projects
            or subscriptions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete organization
      tags:
      - Organizations
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific organization
      parameters:
      - description: Organization ID
        example: '"org_1234567890"'
        in: path
        name: orgId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Organization details
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/internal_transport_http_handlers_organization.Organization'
              type: object
        "400":
          description: Bad request - invalid organization ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get organization details
      tags:
      - Organizations
    put:
      consumes:
      - application/json
      description: Update organization details. Only owners and admins can update
        organization settings.
      parameters:
      - description: Organization ID
        example: '"org_1234567890"'
        in: path
        name: orgId
        required: true
        type: string
      - description: Updated organization details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_transport_http_handlers_organization.UpdateOrganizationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Organization updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/internal_transport_http_handlers_organization.Organization'
              type: object
        "400":
          description: Bad request - invalid input or validation errors
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions (requires owner or admin
            role)
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update organization
      tags:
      - Organizations
  /api/v1/organizations/{orgId}/members:
    get:
      consumes:
      - application/json
      description: Get a list of all members in an organization, including their roles
        and status
      parameters:
      - description: Organization ID
        example: '"org_1234567890"'
        in: path
        name: orgId
        required: true
        type: string
      - description: Filter by member status
        enum:
        - active
        - invited
        - suspended
        in: query
        name: status
        type: string
      - description: Filter by member role
        enum:
        - owner
        - admin
        - developer
        - viewer
        in: query
        name: role
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of organization members with pagination
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/organization.OrganizationMember'
                  type: array
                meta:
                  allOf:
                  - $ref: '#/definitions/response.Meta'
                  - properties:
                      pagination:
                        $ref: '#/definitions/response.Pagination'
                    type: object
              type: object
        "400":
          description: Bad request - invalid organization ID or query parameters
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions to view members
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List organization members
      tags:
      - Organizations
    post:
      consumes:
      - application/json
      description: Send an invitation to join the organization. Only owners and admins
        can invite new members.
      parameters:
      - description: Organization ID
        example: '"org_1234567890"'
        in: path
        name: orgId
        required: true
        type: string
      - description: Member invitation details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/organization.InviteMemberRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Member invitation sent successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/organization.OrganizationMember'
              type: object
        "400":
          description: Bad request - invalid input or validation errors
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions (requires owner or admin
            role)
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict - user is already a member or has pending invitation
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Invite member to organization
      tags:
      - Organizations
  /api/v1/organizations/{orgId}/members/{userId}:
    delete:
      consumes:
      - application/json
      description: Remove a member from the organization or revoke their invitation.
        Owners and admins can remove members.
      parameters:
      - description: Organization ID
        example: '"org_1234567890"'
        in: path
        name: orgId
        required: true
        type: string
      - description: User ID to remove
        example: '"usr_1234567890"'
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Member removed successfully
        "400":
          description: Bad request - invalid organization ID or user ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions or cannot remove organization
            owner
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Organization or member not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Remove member from organization
      tags:
      - Organizations
  /api/v1/organizations/{orgId}/settings:
    get:
      consumes:
      - application/json
      description: Get all settings for an organization as key-value pairs
      parameters:
      - description: Organization ID
        example: '"org_1234567890"'
        in: path
        name: orgId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Organization settings retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/organization.SettingsListResponse'
              type: object
        "400":
          description: Bad request - invalid organization ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all organization settings
      tags:
      - Organization Settings
    post:
      consumes:
      - application/json
      description: Create a new setting for an organization
      parameters:
      - description: Organization ID
        example: '"org_1234567890"'
        in: path
        name: orgId
        required: true
        type: string
      - description: Setting details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/organization.CreateSettingRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Setting created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/organization.OrganizationSetting'
              type: object
        "400":
          description: Bad request - invalid input or validation errors
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict - setting key already exists
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create organization setting
      tags:
      - Organization Settings
  /api/v1/organizations/{orgId}/settings/{key}:
    delete:
      consumes:
      - application/json
      description: Delete a setting for an organization
      parameters:
      - description: Organization ID
        example: '"org_1234567890"'
        in: path
        name: orgId
        required: true
        type: string
      - description: Setting key
        example: '"theme_color"'
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Setting deleted successfully
        "400":
          description: Bad request - invalid parameters
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Setting not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete organization setting
      tags:
      - Organization Settings
    get:
      consumes:
      - application/json
      description: Get a specific setting by key for an organization
      parameters:
      - description: Organization ID
        example: '"org_1234567890"'
        in: path
        name: orgId
        required: true
        type: string
      - description: Setting key
        example: '"theme_color"'
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Setting retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/organization.OrganizationSetting'
              type: object
        "400":
          description: Bad request - invalid parameters
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Setting not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get specific organization setting
      tags:
      - Organization Settings
    put:
      consumes:
      - application/json
      description: Update an existing setting for an organization
      parameters:
      - description: Organization ID
        example: '"org_1234567890"'
        in: path
        name: orgId
        required: true
        type: string
      - description: Setting key
        example: '"theme_color"'
        in: path
        name: key
        required: true
        type: string
      - description: Updated setting value
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/organization.UpdateSettingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Setting updated successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad request - invalid input or validation errors
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Setting not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update organization setting
      tags:
      - Organization Settings
  /api/v1/organizations/{orgId}/settings/bulk:
    post:
      consumes:
      - application/json
      description: Create multiple settings for an organization in a single request
      parameters:
      - description: Organization ID
        example: '"org_1234567890"'
        in: path
        name: orgId
        required: true
        type: string
      - description: Settings to create
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/organization.BulkSettingsRequest'
      produces:
      - application/json
      responses:
        "501":
          description: Not implemented
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Bulk create organization settings
      tags:
      - Organization Settings
  /api/v1/organizations/{orgId}/settings/export:
    get:
      consumes:
      - application/json
      description: Export all settings for an organization
      parameters:
      - description: Organization ID
        example: '"org_1234567890"'
        in: path
        name: orgId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "501":
          description: Not implemented
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Export organization settings
      tags:
      - Organization Settings
  /api/v1/organizations/{orgId}/settings/import:
    post:
      consumes:
      - application/json
      description: Import settings for an organization, creating or updating as needed
      parameters:
      - description: Organization ID
        example: '"org_1234567890"'
        in: path
        name: orgId
        required: true
        type: string
      - description: Settings to import
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/organization.BulkSettingsRequest'
      produces:
      - application/json
      responses:
        "501":
          description: Not implemented
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Import organization settings
      tags:
      - Organization Settings
  /api/v1/organizations/{orgId}/settings/reset:
    post:
      consumes:
      - application/json
      description: Reset all organization settings to default values (removes all
        current settings)
      parameters:
      - description: Organization ID
        example: '"org_1234567890"'
        in: path
        name: orgId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "501":
          description: Not implemented
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Reset organization settings to defaults
      tags:
      - Organization Settings
  /api/v1/projects:
    get:
      consumes:
      - application/json
      description: Get a paginated list of projects accessible to the authenticated
        user
      parameters:
      - description: Filter by organization ID
        example: '"org_1234567890"'
        in: query
        name: organization_id
        type: string
      - description: Filter by project status
        enum:
        - active
        - paused
        - archived
        in: query
        name: status
        type: string
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - description: Search projects by name or slug
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of projects with pagination
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/project.Project'
                  type: array
                meta:
                  allOf:
                  - $ref: '#/definitions/response.Meta'
                  - properties:
                      pagination:
                        $ref: '#/definitions/response.Pagination'
                    type: object
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List projects
      tags:
      - Projects
    post:
      consumes:
      - application/json
      description: Create a new project within an organization. User must have appropriate
        permissions in the organization.
      parameters:
      - description: Project details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/project.CreateProjectRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Project created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/project.Project'
              type: object
        "400":
          description: Bad request - invalid input or validation errors
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions in organization
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict - project slug already exists in organization
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create project
      tags:
      - Projects
  /api/v1/projects/{projectId}:
    delete:
      consumes:
      - application/json
      description: Permanently delete a project and all associated environments and
        data. This action cannot be undone.
      parameters:
      - description: Project ID
        example: '"proj_1234567890"'
        in: path
        name: projectId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Project deleted successfully
        "400":
          description: Bad request - invalid project ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions (requires admin or owner
            role)
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict - cannot delete project with active environments or
            API usage
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete project
      tags:
      - Projects
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific project
      parameters:
      - description: Project ID
        example: '"proj_1234567890"'
        in: path
        name: projectId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Project details
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/project.Project'
              type: object
        "400":
          description: Bad request - invalid project ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get project details
      tags:
      - Projects
    put:
      consumes:
      - application/json
      description: Update project details. Requires appropriate permissions within
        the project organization.
      parameters:
      - description: Project ID
        example: '"proj_1234567890"'
        in: path
        name: projectId
        required: true
        type: string
      - description: Updated project details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/project.UpdateProjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Project updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/project.Project'
              type: object
        "400":
          description: Bad request - invalid input or validation errors
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update project
      tags:
      - Projects
  /api/v1/projects/{projectId}/api-keys:
    get:
      consumes:
      - application/json
      description: Get a paginated list of API keys for a specific project. Keys are
        shown with preview format (bk_xxxx...yyyy) for security.
      parameters:
      - description: Project ID
        example: '"proj_01234567890123456789012345"'
        in: path
        name: projectId
        required: true
        type: string
      - description: Filter by API key status
        enum:
        - active
        - inactive
        - expired
        in: query
        name: status
        type: string
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of project-scoped API keys with pagination
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/apikey.APIKey'
                  type: array
                meta:
                  allOf:
                  - $ref: '#/definitions/response.Meta'
                  - properties:
                      pagination:
                        $ref: '#/definitions/response.Pagination'
                    type: object
              type: object
        "400":
          description: Bad request - invalid project ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions to view API keys
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List API keys
      tags:
      - API Keys
    post:
      consumes:
      - application/json
      description: 'Create a new industry-standard API key for the project. The full
        key will only be displayed once upon creation. Format: bk_{40_char_random}'
      parameters:
      - description: Project ID
        example: '"proj_01234567890123456789012345"'
        in: path
        name: projectId
        required: true
        type: string
      - description: API key details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/apikey.CreateAPIKeyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Project-scoped API key created successfully (full key only
            shown once)
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/apikey.APIKey'
              type: object
        "400":
          description: Bad request - invalid input or validation errors
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions to create API keys
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict - API key name already exists in project
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create API key
      tags:
      - API Keys
  /api/v1/projects/{projectId}/api-keys/{keyId}:
    delete:
      consumes:
      - application/json
      description: Permanently revoke and delete a project-scoped API key. This action
        cannot be undone and will immediately invalidate the key across all environments.
      parameters:
      - description: Project ID
        example: '"proj_01234567890123456789012345"'
        in: path
        name: projectId
        required: true
        type: string
      - description: API Key ID
        example: '"key_01234567890123456789012345"'
        in: path
        name: keyId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Project-scoped API key deleted successfully
        "400":
          description: Bad request - invalid project ID or key ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions to delete API keys
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Project or API key not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete project-scoped API key
      tags:
      - API Keys
  /api/v1/users/me:
    get:
      description: Get the profile information of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: User profile retrieved successfully
          schema:
            $ref: '#/definitions/user.UserProfileResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user profile
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update the profile information of the currently authenticated user
      parameters:
      - description: Profile update information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_transport_http_handlers_user.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            $ref: '#/definitions/user.UserProfileResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update current user profile
      tags:
      - User
  /health:
    get:
      description: Get basic health status of the service
      produces:
      - application/json
      responses:
        "200":
          description: Service is healthy
          schema:
            $ref: '#/definitions/health.HealthResponse'
      summary: Basic health check
      tags:
      - Health
  /health/live:
    get:
      description: Check if service is alive and responsive
      produces:
      - application/json
      responses:
        "200":
          description: Service is alive and responsive
          schema:
            $ref: '#/definitions/health.HealthResponse'
      summary: Liveness check
      tags:
      - Health
  /health/ready:
    get:
      description: Check if service and all dependencies are ready to handle requests
      produces:
      - application/json
      responses:
        "200":
          description: Service and all dependencies are ready
          schema:
            $ref: '#/definitions/health.HealthResponse'
        "503":
          description: Service or dependencies are not ready
          schema:
            $ref: '#/definitions/health.HealthResponse'
      summary: Readiness check
      tags:
      - Health
  /metrics:
    get:
      description: Retrieve Prometheus-compatible metrics for monitoring and observability
      produces:
      - text/plain
      responses:
        "200":
          description: Prometheus metrics in text format
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get Prometheus metrics
      tags:
      - Monitoring
  /v1/auth/validate-key:
    post:
      consumes:
      - application/json
      description: Validates a self-contained API key and extracts project information
        automatically
      parameters:
      - description: 'API key (format: bk_{40_char_random})'
        in: header
        name: X-API-Key
        type: string
      - description: 'Bearer token format: Bearer {api_key}'
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: API key validation successful
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Invalid, inactive, or expired API key
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Validate API key
      tags:
      - SDK - Authentication
  /v1/cache/invalidate:
    post:
      consumes:
      - application/json
      description: Invalidate specific cache entries or clear cache
      parameters:
      - description: Cache invalidation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ai.InvalidateCacheRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Cache invalidated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/ai.InvalidateCacheResponse'
              type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Invalid or missing API key
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Invalidate cache entries
      tags:
      - SDK - Cache
  /v1/cache/status:
    get:
      description: Get current cache health and statistics
      produces:
      - application/json
      responses:
        "200":
          description: Cache status returned
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/ai.CacheStatusResponse'
              type: object
        "401":
          description: Invalid or missing API key
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get cache status
      tags:
      - SDK - Cache
  /v1/chat/completions:
    post:
      consumes:
      - application/json
      description: Generate AI chat completions using OpenAI-compatible API
      parameters:
      - description: Chat completion request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ai.ChatCompletionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Chat completion generated successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Invalid API key
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create chat completion
      tags:
      - AI Gateway
  /v1/completions:
    post:
      consumes:
      - application/json
      description: Generate AI text completions using OpenAI-compatible API
      parameters:
      - description: Text completion request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ai.CompletionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Text completion generated successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Invalid API key
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create text completion
      tags:
      - AI Gateway
  /v1/embeddings:
    post:
      consumes:
      - application/json
      description: Generate text embeddings using OpenAI-compatible API
      parameters:
      - description: Embedding request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ai.EmbeddingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Embeddings generated successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Invalid API key
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create embeddings
      tags:
      - AI Gateway
  /v1/models:
    get:
      description: Get list of available AI models
      produces:
      - application/json
      responses:
        "200":
          description: List of available models
          schema:
            items:
              $ref: '#/definitions/ai.Model'
            type: array
        "401":
          description: Invalid API key
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List available models
      tags:
      - AI Gateway
  /v1/models/{model}:
    get:
      description: Get detailed information about a specific AI model
      parameters:
      - description: Model ID
        example: '"gpt-3.5-turbo"'
        in: path
        name: model
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Model information
          schema:
            $ref: '#/definitions/ai.Model'
        "401":
          description: Invalid API key
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Model not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get model information
      tags:
      - AI Gateway
  /v1/route:
    post:
      consumes:
      - application/json
      description: Determine optimal AI provider and model for a request
      parameters:
      - description: Routing request data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ai.RouteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Routing decision returned
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/ai.RouteResponse'
              type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Invalid or missing API key
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Make AI routing decision
      tags:
      - SDK - Routing
  /v1/telemetry/batch:
    post:
      consumes:
      - application/json
      description: Process a batch of telemetry events asynchronously with ULID-based
        deduplication and Redis Streams. Returns 202 Accepted immediately while events
        are processed in the background.
      parameters:
      - description: Telemetry batch data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_transport_http_handlers_observability.TelemetryBatchRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Batch accepted for async processing
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/internal_transport_http_handlers_observability.TelemetryBatchResponse'
              type: object
        "400":
          description: Invalid request payload
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/response.APIError'
              type: object
        "401":
          description: Invalid or missing API key
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/response.APIError'
              type: object
        "422":
          description: Validation failed
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/response.APIError'
              type: object
        "429":
          description: Rate limit exceeded
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/response.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/response.APIError'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Process high-throughput telemetry batch (async via Redis Streams)
      tags:
      - SDK - Telemetry
  /v1/telemetry/health:
    get:
      description: Get comprehensive health status of telemetry processing system
      produces:
      - application/json
      responses:
        "200":
          description: Health status retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/observability.TelemetryHealthResponse'
              type: object
        "401":
          description: Invalid or missing API key
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/response.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/response.APIError'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get telemetry service health status
      tags:
      - SDK - Telemetry
  /v1/telemetry/metrics:
    get:
      description: Get comprehensive metrics for telemetry processing system
      produces:
      - application/json
      responses:
        "200":
          description: Metrics retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/observability.TelemetryMetricsResponse'
              type: object
        "401":
          description: Invalid or missing API key
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/response.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/response.APIError'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get telemetry service metrics
      tags:
      - SDK - Telemetry
  /v1/telemetry/performance:
    get:
      description: Get performance statistics for telemetry processing over a time
        window
      parameters:
      - default: 1h
        description: Time window for statistics
        enum:
        - 1m
        - 5m
        - 15m
        - 1h
        - 6h
        - 24h
        in: query
        name: window
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Performance stats retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/observability.TelemetryPerformanceStatsResponse'
              type: object
        "400":
          description: Invalid time window parameter
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/response.APIError'
              type: object
        "401":
          description: Invalid or missing API key
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/response.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/response.APIError'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get telemetry performance statistics
      tags:
      - SDK - Telemetry
  /v1/telemetry/validate:
    post:
      consumes:
      - application/json
      description: Validate a telemetry event without processing it
      parameters:
      - description: Event to validate
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_transport_http_handlers_observability.TelemetryEventRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Event validation result
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/observability.TelemetryValidationResponse'
              type: object
        "400":
          description: Invalid request payload
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/response.APIError'
              type: object
        "401":
          description: Invalid or missing API key
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/response.APIError'
              type: object
        "422":
          description: Validation failed
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/response.APIError'
              type: object
      security:
      - ApiKeyAuth: []
      summary: Validate telemetry event structure
      tags:
      - SDK - Telemetry
  /ws:
    get:
      consumes:
      - application/json
      description: Upgrade HTTP connection to WebSocket for real-time updates and
        notifications
      produces:
      - application/json
      responses:
        "101":
          description: WebSocket connection established
          schema:
            type: string
        "400":
          description: Bad request - WebSocket upgrade failed
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized - authentication required
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Establish WebSocket connection
      tags:
      - WebSocket
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    description: 'API key authentication for AI gateway and SDKs. Format: Authorization:
      Bearer bk_live_... OR X-API-Key: bk_live_... (both supported for flexibility)'
    in: header
    name: Authorization
    type: apiKey
  BearerAuth:
    description: 'JWT token authentication for web dashboard. Format: Authorization:
      Bearer <jwt_token>'
    in: header
    name: Authorization
    type: apiKey
    x-extension-openapi: '{"definitions": {"ULID": {"type": "string", "description":
      "ULID (Universally Unique Lexicographically Sortable Identifier)", "example":
      "01ARZ3NDEKTSV4RRFFQ69G5FAV", "pattern": "^[0-9A-Z]{26}$"}}}'
swagger: "2.0"
